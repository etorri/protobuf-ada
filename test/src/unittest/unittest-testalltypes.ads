-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

limited with Unittest.ForeignMessage;
limited with Unittest.ImportMessage;
limited with Unittest.PublicImportMessage;
limited with Unittest.TestAllTypes.NestedMessage;

package Unittest.TestAllTypes is
  type Instance is new Protocol_Buffers.Message.Instance with private;
  type TestAllTypes_Access is access all Instance;

  subtype NestedEnum is Unittest.Enumeration.TestAllTypes.NestedEnum;

  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  overriding
  procedure Clear
    (The_Message : in out Unittest.TestAllTypes.Instance);

  overriding
  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestAllTypes.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance);

  overriding
  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestAllTypes.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance);

  overriding
  procedure Merge
    (To   : in out Unittest.TestAllTypes.Instance;
     From : in Unittest.TestAllTypes.Instance);

  overriding
  procedure Copy
    (To   : in out Unittest.TestAllTypes.Instance;
     From : in Unittest.TestAllTypes.Instance);

  overriding
  function Get_Type_Name
    (The_Message : in Unittest.TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;

  overriding
  function Byte_Size
    (The_Message : in out Unittest.TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;

  overriding
  function Get_Cached_Size
    (The_Message : in Unittest.TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;

  overriding
  function Is_Initialized
    (The_Message : in Unittest.TestAllTypes.Instance) return Boolean;

  overriding
  procedure Finalize (The_Message : in out Unittest.TestAllTypes.Instance);

  ---------------------------------------------------------------------------
  -- Field accessor declarations --------------------------------------------
  ---------------------------------------------------------------------------

  -- optional int32 optional_int32 = 1;
  function Has_Optional_Int32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Int32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Int32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Optional_Int32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- optional int64 optional_int64 = 2;
  function Has_Optional_Int64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Int64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Int64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Optional_Int64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional uint32 optional_uint32 = 3;
  function Has_Optional_Uint32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Uint32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Uint32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Optional_Uint32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- optional uint64 optional_uint64 = 4;
  function Has_Optional_Uint64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Uint64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Uint64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Optional_Uint64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- optional sint32 optional_sint32 = 5;
  function Has_Optional_Sint32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Sint32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Sint32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Optional_Sint32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- optional sint64 optional_sint64 = 6;
  function Has_Optional_Sint64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Sint64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Sint64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Optional_Sint64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional fixed32 optional_fixed32 = 7;
  function Has_Optional_Fixed32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Fixed32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Fixed32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Optional_Fixed32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- optional fixed64 optional_fixed64 = 8;
  function Has_Optional_Fixed64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Fixed64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Fixed64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Optional_Fixed64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- optional sfixed32 optional_sfixed32 = 9;
  function Has_Optional_Sfixed32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Sfixed32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Sfixed32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Optional_Sfixed32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- optional sfixed64 optional_sfixed64 = 10;
  function Has_Optional_Sfixed64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Sfixed64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Sfixed64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Optional_Sfixed64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional float optional_float = 11;
  function Has_Optional_Float
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Float
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Float
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Float;
  procedure Set_Optional_Float
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Float);

  -- optional double optional_double = 12;
  function Has_Optional_Double
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Double
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Double
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Double;
  procedure Set_Optional_Double
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Double);

  -- optional bool optional_bool = 13;
  function Has_Optional_Bool
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Bool
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Bool
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Bool;
  procedure Set_Optional_Bool
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Bool);

  -- optional string optional_string = 14;
  function Has_Optional_String
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_String
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_String
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Optional_String
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Optional_String
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Optional_String
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional bytes optional_bytes = 15;
  function Has_Optional_Bytes
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Bytes
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Bytes
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Optional_Bytes
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Optional_Bytes
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Optional_Bytes
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
  function Has_Optional_Nested_Message
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Nested_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Nested_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance;
  function Release_Optional_Nested_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance;
  procedure Set_Optional_Nested_Message
    (The_Message : in out TestAllTypes.Instance;
     Value : in Unittest.TestAllTypes.NestedMessage.NestedMessage_Access);

  -- optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
  function Has_Optional_Foreign_Message
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Foreign_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Foreign_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.ForeignMessage.Instance;
  function Release_Optional_Foreign_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.ForeignMessage.Instance;
  procedure Set_Optional_Foreign_Message
    (The_Message : in out TestAllTypes.Instance;
     Value : in Unittest.ForeignMessage.ForeignMessage_Access);

  -- optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
  function Has_Optional_Import_Message
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Import_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Import_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.ImportMessage.Instance;
  function Release_Optional_Import_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.ImportMessage.Instance;
  procedure Set_Optional_Import_Message
    (The_Message : in out TestAllTypes.Instance;
     Value : in Unittest.ImportMessage.ImportMessage_Access);

  -- optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
  function Has_Optional_Nested_Enum
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Nested_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Nested_Enum
    (The_Message : in TestAllTypes.Instance) return NestedEnum;
  procedure Set_Optional_Nested_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in NestedEnum);

  -- optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  function Has_Optional_Foreign_Enum
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Foreign_Enum
    (The_Message : in TestAllTypes.Instance) return ForeignEnum;
  procedure Set_Optional_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in ForeignEnum);

  -- optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
  function Has_Optional_Import_Enum
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Import_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Import_Enum
    (The_Message : in TestAllTypes.Instance) return ImportEnum;
  procedure Set_Optional_Import_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in ImportEnum);

  -- optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  function Has_Optional_String_Piece
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_String_Piece
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_String_Piece
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Optional_String_Piece
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Optional_String_Piece
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Optional_String_Piece
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional string optional_cord = 25 [ctype = CORD];
  function Has_Optional_Cord
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Cord
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Cord
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Optional_Cord
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Optional_Cord
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Optional_Cord
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
  function Has_Optional_Public_Import_Message
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Public_Import_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Public_Import_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.PublicImportMessage.Instance;
  function Release_Optional_Public_Import_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.PublicImportMessage.Instance;
  procedure Set_Optional_Public_Import_Message
    (The_Message : in out TestAllTypes.Instance;
     Value : in Unittest.PublicImportMessage.PublicImportMessage_Access);

  -- optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  function Has_Optional_Lazy_Message
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Optional_Lazy_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Optional_Lazy_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance;
  function Release_Optional_Lazy_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance;
  procedure Set_Optional_Lazy_Message
    (The_Message : in out TestAllTypes.Instance;
     Value : in Unittest.TestAllTypes.NestedMessage.NestedMessage_Access);

  -- repeated int32 repeated_int32 = 31;
  function Repeated_Int32_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Int32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Int32
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Repeated_Int32
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);
  procedure Add_Repeated_Int32
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- repeated int64 repeated_int64 = 32;
  function Repeated_Int64_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Int64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Int64
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Repeated_Int64
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);
  procedure Add_Repeated_Int64
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- repeated uint32 repeated_uint32 = 33;
  function Repeated_Uint32_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Uint32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Uint32
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Repeated_Uint32
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);
  procedure Add_Repeated_Uint32
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- repeated uint64 repeated_uint64 = 34;
  function Repeated_Uint64_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Uint64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Uint64
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Repeated_Uint64
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);
  procedure Add_Repeated_Uint64
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- repeated sint32 repeated_sint32 = 35;
  function Repeated_Sint32_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Sint32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Sint32
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Repeated_Sint32
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);
  procedure Add_Repeated_Sint32
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- repeated sint64 repeated_sint64 = 36;
  function Repeated_Sint64_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Sint64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Sint64
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Repeated_Sint64
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);
  procedure Add_Repeated_Sint64
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- repeated fixed32 repeated_fixed32 = 37;
  function Repeated_Fixed32_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Fixed32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Fixed32
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Repeated_Fixed32
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);
  procedure Add_Repeated_Fixed32
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- repeated fixed64 repeated_fixed64 = 38;
  function Repeated_Fixed64_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Fixed64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Fixed64
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Repeated_Fixed64
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);
  procedure Add_Repeated_Fixed64
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- repeated sfixed32 repeated_sfixed32 = 39;
  function Repeated_Sfixed32_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Sfixed32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Sfixed32
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Repeated_Sfixed32
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);
  procedure Add_Repeated_Sfixed32
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- repeated sfixed64 repeated_sfixed64 = 40;
  function Repeated_Sfixed64_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Sfixed64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Sfixed64
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Repeated_Sfixed64
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);
  procedure Add_Repeated_Sfixed64
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- repeated float repeated_float = 41;
  function Repeated_Float_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Float
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Float
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Float;
  procedure Set_Repeated_Float
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Float);
  procedure Add_Repeated_Float
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Float);

  -- repeated double repeated_double = 42;
  function Repeated_Double_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Double
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Double
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Double;
  procedure Set_Repeated_Double
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Double);
  procedure Add_Repeated_Double
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Double);

  -- repeated bool repeated_bool = 43;
  function Repeated_Bool_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Bool
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Bool
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Bool;
  procedure Set_Repeated_Bool
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool);
  procedure Add_Repeated_Bool
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool);

  -- repeated string repeated_string = 44;
  function Repeated_String_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_String
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_String
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String;
  procedure Set_Repeated_String
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  procedure Add_Repeated_String
    (The_Message : in out TestAllTypes.Instance; Value : in Protocol_Buffers.Wire_Format.PB_String);

  -- repeated bytes repeated_bytes = 45;
  function Repeated_Bytes_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Bytes
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Bytes
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String;
  procedure Set_Repeated_Bytes
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  procedure Add_Repeated_Bytes
    (The_Message : in out TestAllTypes.Instance; Value : in Protocol_Buffers.Wire_Format.PB_String);

  -- repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  function Repeated_Nested_Message_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Nested_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Nested_Message
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return access Unittest.TestAllTypes.NestedMessage.Instance;
  function Add_Repeated_Nested_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance;

  -- repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
  function Repeated_Foreign_Message_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Foreign_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Foreign_Message
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return access Unittest.ForeignMessage.Instance;
  function Add_Repeated_Foreign_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.ForeignMessage.Instance;

  -- repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  function Repeated_Import_Message_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Import_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Import_Message
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return access Unittest.ImportMessage.Instance;
  function Add_Repeated_Import_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.ImportMessage.Instance;

  -- repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  function Repeated_Nested_Enum_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Nested_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Nested_Enum
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return NestedEnum;
  procedure Set_Repeated_Nested_Enum
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in NestedEnum);
  procedure Add_Repeated_Nested_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in NestedEnum);

  -- repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
  function Repeated_Foreign_Enum_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Foreign_Enum
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return ForeignEnum;
  procedure Set_Repeated_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in ForeignEnum);
  procedure Add_Repeated_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in ForeignEnum);

  -- repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
  function Repeated_Import_Enum_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Import_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Import_Enum
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return ImportEnum;
  procedure Set_Repeated_Import_Enum
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in ImportEnum);
  procedure Add_Repeated_Import_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in ImportEnum);

  -- repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  function Repeated_String_Piece_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_String_Piece
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_String_Piece
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String;
  procedure Set_Repeated_String_Piece
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  procedure Add_Repeated_String_Piece
    (The_Message : in out TestAllTypes.Instance; Value : in Protocol_Buffers.Wire_Format.PB_String);

  -- repeated string repeated_cord = 55 [ctype = CORD];
  function Repeated_Cord_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Cord
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Cord
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String;
  procedure Set_Repeated_Cord
    (The_Message : in out TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  procedure Add_Repeated_Cord
    (The_Message : in out TestAllTypes.Instance; Value : in Protocol_Buffers.Wire_Format.PB_String);

  -- repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  function Repeated_Lazy_Message_Size
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Repeated_Lazy_Message
    (The_Message : in out TestAllTypes.Instance);
  function Get_Repeated_Lazy_Message
    (The_Message : in TestAllTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return access Unittest.TestAllTypes.NestedMessage.Instance;
  function Add_Repeated_Lazy_Message
    (The_Message : in out TestAllTypes.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance;

  -- optional int32 default_int32 = 61 [default = 41];
  function Has_Default_Int32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Int32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Int32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Default_Int32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- optional int64 default_int64 = 62 [default = 42];
  function Has_Default_Int64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Int64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Int64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Default_Int64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional uint32 default_uint32 = 63 [default = 43];
  function Has_Default_Uint32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Uint32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Uint32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Default_Uint32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- optional uint64 default_uint64 = 64 [default = 44];
  function Has_Default_Uint64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Uint64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Uint64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Default_Uint64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- optional sint32 default_sint32 = 65 [default = -45];
  function Has_Default_Sint32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Sint32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Sint32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Default_Sint32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- optional sint64 default_sint64 = 66 [default = 46];
  function Has_Default_Sint64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Sint64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Sint64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Default_Sint64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional fixed32 default_fixed32 = 67 [default = 47];
  function Has_Default_Fixed32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Fixed32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Fixed32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Default_Fixed32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- optional fixed64 default_fixed64 = 68 [default = 48];
  function Has_Default_Fixed64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Fixed64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Fixed64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Default_Fixed64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- optional sfixed32 default_sfixed32 = 69 [default = 49];
  function Has_Default_Sfixed32
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Sfixed32
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Sfixed32
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Default_Sfixed32
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- optional sfixed64 default_sfixed64 = 70 [default = -50];
  function Has_Default_Sfixed64
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Sfixed64
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Sfixed64
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Default_Sfixed64
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional float default_float = 71 [default = 51.5];
  function Has_Default_Float
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Float
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Float
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Float;
  procedure Set_Default_Float
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Float);

  -- optional double default_double = 72 [default = 52000];
  function Has_Default_Double
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Double
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Double
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Double;
  procedure Set_Default_Double
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Double);

  -- optional bool default_bool = 73 [default = true];
  function Has_Default_Bool
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Bool
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Bool
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Bool;
  procedure Set_Default_Bool
    (The_Message : in out TestAllTypes.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Bool);

  -- optional string default_string = 74 [default = "hello"];
  function Has_Default_String
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_String
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_String
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Default_String
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Default_String
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Default_String
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional bytes default_bytes = 75 [default = "world"];
  function Has_Default_Bytes
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Bytes
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Bytes
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Default_Bytes
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Default_Bytes
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Default_Bytes
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
  function Has_Default_Nested_Enum
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Nested_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Nested_Enum
    (The_Message : in TestAllTypes.Instance) return NestedEnum;
  procedure Set_Default_Nested_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in NestedEnum);

  -- optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
  function Has_Default_Foreign_Enum
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Foreign_Enum
    (The_Message : in TestAllTypes.Instance) return ForeignEnum;
  procedure Set_Default_Foreign_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in ForeignEnum);

  -- optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
  function Has_Default_Import_Enum
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Import_Enum
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Import_Enum
    (The_Message : in TestAllTypes.Instance) return ImportEnum;
  procedure Set_Default_Import_Enum
    (The_Message : in out TestAllTypes.Instance;
     Value : in ImportEnum);

  -- optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  function Has_Default_String_Piece
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_String_Piece
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_String_Piece
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Default_String_Piece
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Default_String_Piece
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Default_String_Piece
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional string default_cord = 85 [default = "123", ctype = CORD];
  function Has_Default_Cord
    (The_Message : in TestAllTypes.Instance) return Boolean;
  procedure Clear_Default_Cord
    (The_Message : in out TestAllTypes.Instance);
  function Get_Default_Cord
    (The_Message : in TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_Default_Cord
    (The_Message : in out TestAllTypes.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_Default_Cord
    (The_Message : in out TestAllTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_Default_Cord
    (The_Message : in out TestAllTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  ---------------------------------------------------------------------------
  -- Enumeration Literals ---------------------------------------------------
  ---------------------------------------------------------------------------

  function FOO return NestedEnum renames Unittest.Enumeration.TestAllTypes.FOO;
  function BAR return NestedEnum renames Unittest.Enumeration.TestAllTypes.BAR;
  function BAZ return NestedEnum renames Unittest.Enumeration.TestAllTypes.BAZ;

  function Enumeration_To_PB_Int32 is new Ada.Unchecked_Conversion (NestedEnum, Protocol_Buffers.Wire_Format.PB_Int32);
  function PB_Int32_To_Enumeration is new Ada.Unchecked_Conversion (Protocol_Buffers.Wire_Format.PB_Int32, NestedEnum);

private
  Default_Default_String : aliased Protocol_Buffers.Wire_Format.PB_String :=
    "hello";
  Default_Default_Bytes : aliased Protocol_Buffers.Wire_Format.PB_String :=
    "world";
  Default_Default_String_Piece : aliased Protocol_Buffers.Wire_Format.PB_String :=
    "abc";
  Default_Default_Cord : aliased Protocol_Buffers.Wire_Format.PB_String :=
    "123";
  type Instance is new Protocol_Buffers.Message.Instance with record
    Optional_Int32 : Protocol_Buffers.Wire_Format.PB_Int32 := 0;
    Optional_Int64 : Protocol_Buffers.Wire_Format.PB_Int64 := 0;
    Optional_Uint32 : Protocol_Buffers.Wire_Format.PB_UInt32 := 0;
    Optional_Uint64 : Protocol_Buffers.Wire_Format.PB_UInt64 := 0;
    Optional_Sint32 : Protocol_Buffers.Wire_Format.PB_Int32 := 0;
    Optional_Sint64 : Protocol_Buffers.Wire_Format.PB_Int64 := 0;
    Optional_Fixed32 : Protocol_Buffers.Wire_Format.PB_UInt32 := 0;
    Optional_Fixed64 : Protocol_Buffers.Wire_Format.PB_UInt64 := 0;
    Optional_Sfixed32 : Protocol_Buffers.Wire_Format.PB_Int32 := 0;
    Optional_Sfixed64 : Protocol_Buffers.Wire_Format.PB_Int64 := 0;
    Optional_Float : Protocol_Buffers.Wire_Format.PB_Float := Protocol_Buffers.Wire_Format.PB_Float (0.00000);
    Optional_Double : Protocol_Buffers.Wire_Format.PB_Double := Protocol_Buffers.Wire_Format.PB_Double (0.00000000000000);
    Optional_Bool : Protocol_Buffers.Wire_Format.PB_Bool := False;
    Optional_String : Protocol_Buffers.Wire_Format.PB_String_Access := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    Optional_Bytes : Protocol_Buffers.Wire_Format.PB_String_Access := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    Optional_Nested_Message : access Unittest.TestAllTypes.NestedMessage.Instance;
    Optional_Foreign_Message : access Unittest.ForeignMessage.Instance;
    Optional_Import_Message : access Unittest.ImportMessage.Instance;
    Optional_Nested_Enum : NestedEnum := NestedEnum'(FOO);
    Optional_Foreign_Enum : ForeignEnum := ForeignEnum'(FOREIGN_FOO);
    Optional_Import_Enum : ImportEnum := ImportEnum'(IMPORT_FOO);
    Optional_String_Piece : Protocol_Buffers.Wire_Format.PB_String_Access := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    Optional_Cord : Protocol_Buffers.Wire_Format.PB_String_Access := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    Optional_Public_Import_Message : access Unittest.PublicImportMessage.Instance;
    Optional_Lazy_Message : access Unittest.TestAllTypes.NestedMessage.Instance;
    Repeated_Int32 : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Repeated_Int64 : Protocol_Buffers.Wire_Format.PB_Int64_Vector.Vector;
    Repeated_Uint32 : Protocol_Buffers.Wire_Format.PB_UInt32_Vector.Vector;
    Repeated_Uint64 : Protocol_Buffers.Wire_Format.PB_UInt64_Vector.Vector;
    Repeated_Sint32 : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Repeated_Sint64 : Protocol_Buffers.Wire_Format.PB_Int64_Vector.Vector;
    Repeated_Fixed32 : Protocol_Buffers.Wire_Format.PB_UInt32_Vector.Vector;
    Repeated_Fixed64 : Protocol_Buffers.Wire_Format.PB_UInt64_Vector.Vector;
    Repeated_Sfixed32 : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Repeated_Sfixed64 : Protocol_Buffers.Wire_Format.PB_Int64_Vector.Vector;
    Repeated_Float : Protocol_Buffers.Wire_Format.PB_Float_Vector.Vector;
    Repeated_Double : Protocol_Buffers.Wire_Format.PB_Double_Vector.Vector;
    Repeated_Bool : Protocol_Buffers.Wire_Format.PB_Bool_Vector.Vector;
    Repeated_String : Protocol_Buffers.Wire_Format.PB_String_Access_Vector.Vector;
    Repeated_Bytes : Protocol_Buffers.Wire_Format.PB_String_Access_Vector.Vector;
    Repeated_Nested_Message : Protocol_Buffers.Message.Message_Vector.Vector;
    Repeated_Foreign_Message : Protocol_Buffers.Message.Message_Vector.Vector;
    Repeated_Import_Message : Protocol_Buffers.Message.Message_Vector.Vector;
    Repeated_Nested_Enum : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Repeated_Foreign_Enum : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Repeated_Import_Enum : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Repeated_String_Piece : Protocol_Buffers.Wire_Format.PB_String_Access_Vector.Vector;
    Repeated_Cord : Protocol_Buffers.Wire_Format.PB_String_Access_Vector.Vector;
    Repeated_Lazy_Message : Protocol_Buffers.Message.Message_Vector.Vector;
    Default_Int32 : Protocol_Buffers.Wire_Format.PB_Int32 := 41;
    Default_Int64 : Protocol_Buffers.Wire_Format.PB_Int64 := 42;
    Default_Uint32 : Protocol_Buffers.Wire_Format.PB_UInt32 := 43;
    Default_Uint64 : Protocol_Buffers.Wire_Format.PB_UInt64 := 44;
    Default_Sint32 : Protocol_Buffers.Wire_Format.PB_Int32 := -45;
    Default_Sint64 : Protocol_Buffers.Wire_Format.PB_Int64 := 46;
    Default_Fixed32 : Protocol_Buffers.Wire_Format.PB_UInt32 := 47;
    Default_Fixed64 : Protocol_Buffers.Wire_Format.PB_UInt64 := 48;
    Default_Sfixed32 : Protocol_Buffers.Wire_Format.PB_Int32 := 49;
    Default_Sfixed64 : Protocol_Buffers.Wire_Format.PB_Int64 := -50;
    Default_Float : Protocol_Buffers.Wire_Format.PB_Float := Protocol_Buffers.Wire_Format.PB_Float (51.5000);
    Default_Double : Protocol_Buffers.Wire_Format.PB_Double := Protocol_Buffers.Wire_Format.PB_Double (52000.0000000000);
    Default_Bool : Protocol_Buffers.Wire_Format.PB_Bool := True;
    Default_String : Protocol_Buffers.Wire_Format.PB_String_Access := Default_Default_String'Access;
    Default_Bytes : Protocol_Buffers.Wire_Format.PB_String_Access := Default_Default_Bytes'Access;
    Default_Nested_Enum : NestedEnum := NestedEnum'(BAR);
    Default_Foreign_Enum : ForeignEnum := ForeignEnum'(FOREIGN_BAR);
    Default_Import_Enum : ImportEnum := ImportEnum'(IMPORT_BAR);
    Default_String_Piece : Protocol_Buffers.Wire_Format.PB_String_Access := Default_Default_String_Piece'Access;
    Default_Cord : Protocol_Buffers.Wire_Format.PB_String_Access := Default_Default_Cord'Access;
    Has_Bits : Protocol_Buffers.Wire_Format.Has_Bits_Array_Type (0 .. (69 + 31) / 32) := (others => 0);
    Cached_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  end record;

  procedure Set_Has_Optional_Int32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Int32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Int64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Int64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Uint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Uint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Uint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Uint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Sint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Sint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Sint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Sint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Fixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Fixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Fixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Fixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Sfixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Sfixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Sfixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Sfixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Float (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Float (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Double (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Double (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Bool (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Bool (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_String (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_String (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Bytes (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Bytes (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Nested_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Nested_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Foreign_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Foreign_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Import_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Import_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Nested_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Nested_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Foreign_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Foreign_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Import_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Import_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_String_Piece (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_String_Piece (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Cord (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Cord (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Public_Import_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Public_Import_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Optional_Lazy_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Optional_Lazy_Message (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Int32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Int32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Int64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Int64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Uint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Uint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Uint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Uint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Sint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Sint32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Sint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Sint64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Fixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Fixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Fixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Fixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Sfixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Sfixed32 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Sfixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Sfixed64 (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Float (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Float (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Double (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Double (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Bool (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Bool (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_String (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_String (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Bytes (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Bytes (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Nested_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Nested_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Foreign_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Foreign_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Import_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Import_Enum (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_String_Piece (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_String_Piece (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Set_Has_Default_Cord (The_Message : in out Unittest.TestAllTypes.Instance);
  procedure Clear_Has_Default_Cord (The_Message : in out Unittest.TestAllTypes.Instance);
end Unittest.TestAllTypes;
