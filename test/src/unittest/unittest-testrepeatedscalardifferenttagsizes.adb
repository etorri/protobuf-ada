-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package body Unittest.TestRepeatedScalarDifferentTagSizes is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Fixed32.Clear;
    The_Message.Repeated_Int32.Clear;
    The_Message.Repeated_Fixed64.Clear;
    The_Message.Repeated_Int64.Clear;
    The_Message.Repeated_Float.Clear;
    The_Message.Repeated_Uint64.Clear;
    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.TestRepeatedScalarDifferentTagSizes.Instance;
     From : in Unittest.TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.TestRepeatedScalarDifferentTagSizes";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.TestRepeatedScalarDifferentTagSizes.Instance) return Boolean is
  begin
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.TestRepeatedScalarDifferentTagSizes.Instance;
     From : in Unittest.TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    To.Repeated_Fixed32.Append(From.Repeated_Fixed32);
    To.Repeated_Int32.Append(From.Repeated_Int32);
    To.Repeated_Fixed64.Append(From.Repeated_Fixed64);
    To.Repeated_Int64.Append(From.Repeated_Int64);
    To.Repeated_Float.Append(From.Repeated_Float);
    To.Repeated_Uint64.Append(From.Repeated_Uint64);
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    -- repeated fixed32 repeated_fixed32 = 12;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Repeated_Fixed32_Size;
      Total_Size := Total_Size + 1 * The_Message.Repeated_Fixed32_Size + Data_Size;
    end;

    -- repeated int32 repeated_int32 = 13;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Repeated_Int32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 1 * The_Message.Repeated_Int32_Size + Data_Size;
    end;

    -- repeated fixed64 repeated_fixed64 = 2046;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Repeated_Fixed64_Size;
      Total_Size := Total_Size + 2 * The_Message.Repeated_Fixed64_Size + Data_Size;
    end;

    -- repeated int64 repeated_int64 = 2047;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Repeated_Int64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_64_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Repeated_Int64_Size + Data_Size;
    end;

    -- repeated float repeated_float = 262142;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Repeated_Float_Size;
      Total_Size := Total_Size + 3 * The_Message.Repeated_Float_Size + Data_Size;
    end;

    -- repeated uint64 repeated_uint64 = 262143;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Repeated_Uint64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Unsigned_Integer_64_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 3 * The_Message.Repeated_Uint64_Size + Data_Size;
    end;

    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestRepeatedScalarDifferentTagSizes.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- repeated fixed32 repeated_fixed32 = 12;
    for E of The_Message.Repeated_Fixed32 loop
      The_Coded_Output_Stream.Write_Fixed_32 (12, E);
    end loop;
    -- repeated int32 repeated_int32 = 13;
    for E of The_Message.Repeated_Int32 loop
      The_Coded_Output_Stream.Write_Integer_32 (13, E);
    end loop;
    -- repeated fixed64 repeated_fixed64 = 2046;
    for E of The_Message.Repeated_Fixed64 loop
      The_Coded_Output_Stream.Write_Fixed_64 (2046, E);
    end loop;
    -- repeated int64 repeated_int64 = 2047;
    for E of The_Message.Repeated_Int64 loop
      The_Coded_Output_Stream.Write_Integer_64 (2047, E);
    end loop;
    -- repeated float repeated_float = 262142;
    for E of The_Message.Repeated_Float loop
      The_Coded_Output_Stream.Write_Float (262142, E);
    end loop;
    -- repeated uint64 repeated_uint64 = 262143;
    for E of The_Message.Repeated_Uint64 loop
      The_Coded_Output_Stream.Write_Unsigned_Integer_64 (262143, E);
    end loop;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestRepeatedScalarDifferentTagSizes.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- repeated fixed32 repeated_fixed32 = 12;
      when 12 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_32 then
          The_Message.Repeated_Fixed32.Append (The_Coded_Input_Stream.Read_Fixed_32);
        end if;
      -- repeated int32 repeated_int32 = 13;
      when 13 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Repeated_Int32.Append (The_Coded_Input_Stream.Read_Integer_32);
        end if;
      -- repeated fixed64 repeated_fixed64 = 2046;
      when 2046 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_64 then
          The_Message.Repeated_Fixed64.Append (The_Coded_Input_Stream.Read_Fixed_64);
        end if;
      -- repeated int64 repeated_int64 = 2047;
      when 2047 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Repeated_Int64.Append (The_Coded_Input_Stream.Read_Integer_64);
        end if;
      -- repeated float repeated_float = 262142;
      when 262142 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_32 then
          The_Message.Repeated_Float.Append (The_Coded_Input_Stream.Read_Float);
        end if;
      -- repeated uint64 repeated_uint64 = 262143;
      when 262143 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Repeated_Uint64.Append (The_Coded_Input_Stream.Read_Unsigned_Integer_64);
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    null;
  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- repeated fixed32 repeated_fixed32 = 12;
  function Repeated_Fixed32_Size
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeated_Fixed32.Length);
  end Repeated_Fixed32_Size;

  procedure Clear_Repeated_Fixed32
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Fixed32.Clear;
  end Clear_Repeated_Fixed32;

  function Get_Repeated_Fixed32
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32 is
  begin
    return The_Message.Repeated_Fixed32.Element (Index);
  end Get_Repeated_Fixed32;

  procedure Set_Repeated_Fixed32
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Repeated_Fixed32.Replace_Element (Index, Value);
  end Set_Repeated_Fixed32;

  procedure Add_Repeated_Fixed32
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Repeated_Fixed32.Append (Value);
  end Add_Repeated_Fixed32;

  -- repeated int32 repeated_int32 = 13;
  function Repeated_Int32_Size
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeated_Int32.Length);
  end Repeated_Int32_Size;

  procedure Clear_Repeated_Int32
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Int32.Clear;
  end Clear_Repeated_Int32;

  function Get_Repeated_Int32
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Repeated_Int32.Element (Index);
  end Get_Repeated_Int32;

  procedure Set_Repeated_Int32
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Repeated_Int32.Replace_Element (Index, Value);
  end Set_Repeated_Int32;

  procedure Add_Repeated_Int32
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Repeated_Int32.Append (Value);
  end Add_Repeated_Int32;

  -- repeated fixed64 repeated_fixed64 = 2046;
  function Repeated_Fixed64_Size
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeated_Fixed64.Length);
  end Repeated_Fixed64_Size;

  procedure Clear_Repeated_Fixed64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Fixed64.Clear;
  end Clear_Repeated_Fixed64;

  function Get_Repeated_Fixed64
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64 is
  begin
    return The_Message.Repeated_Fixed64.Element (Index);
  end Get_Repeated_Fixed64;

  procedure Set_Repeated_Fixed64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Repeated_Fixed64.Replace_Element (Index, Value);
  end Set_Repeated_Fixed64;

  procedure Add_Repeated_Fixed64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Repeated_Fixed64.Append (Value);
  end Add_Repeated_Fixed64;

  -- repeated int64 repeated_int64 = 2047;
  function Repeated_Int64_Size
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeated_Int64.Length);
  end Repeated_Int64_Size;

  procedure Clear_Repeated_Int64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Int64.Clear;
  end Clear_Repeated_Int64;

  function Get_Repeated_Int64
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Repeated_Int64.Element (Index);
  end Get_Repeated_Int64;

  procedure Set_Repeated_Int64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Repeated_Int64.Replace_Element (Index, Value);
  end Set_Repeated_Int64;

  procedure Add_Repeated_Int64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Repeated_Int64.Append (Value);
  end Add_Repeated_Int64;

  -- repeated float repeated_float = 262142;
  function Repeated_Float_Size
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeated_Float.Length);
  end Repeated_Float_Size;

  procedure Clear_Repeated_Float
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Float.Clear;
  end Clear_Repeated_Float;

  function Get_Repeated_Float
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Float is
  begin
    return The_Message.Repeated_Float.Element (Index);
  end Get_Repeated_Float;

  procedure Set_Repeated_Float
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Float) is
  begin
    The_Message.Repeated_Float.Replace_Element (Index, Value);
  end Set_Repeated_Float;

  procedure Add_Repeated_Float
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Float) is
  begin
    The_Message.Repeated_Float.Append (Value);
  end Add_Repeated_Float;

  -- repeated uint64 repeated_uint64 = 262143;
  function Repeated_Uint64_Size
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeated_Uint64.Length);
  end Repeated_Uint64_Size;

  procedure Clear_Repeated_Uint64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance) is
  begin
    The_Message.Repeated_Uint64.Clear;
  end Clear_Repeated_Uint64;

  function Get_Repeated_Uint64
    (The_Message : in TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64 is
  begin
    return The_Message.Repeated_Uint64.Element (Index);
  end Get_Repeated_Uint64;

  procedure Set_Repeated_Uint64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Repeated_Uint64.Replace_Element (Index, Value);
  end Set_Repeated_Uint64;

  procedure Add_Repeated_Uint64
    (The_Message : in out TestRepeatedScalarDifferentTagSizes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Repeated_Uint64.Append (Value);
  end Add_Repeated_Uint64;

end Unittest.TestRepeatedScalarDifferentTagSizes;
