-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package Unittest.TestFieldOrderings is
  type Instance is new Protocol_Buffers.Message.Instance with private;
  type TestFieldOrderings_Access is access all Instance;

  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  overriding
  procedure Clear
    (The_Message : in out Unittest.TestFieldOrderings.Instance);

  overriding
  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestFieldOrderings.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance);

  overriding
  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestFieldOrderings.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance);

  overriding
  procedure Merge
    (To   : in out Unittest.TestFieldOrderings.Instance;
     From : in Unittest.TestFieldOrderings.Instance);

  overriding
  procedure Copy
    (To   : in out Unittest.TestFieldOrderings.Instance;
     From : in Unittest.TestFieldOrderings.Instance);

  overriding
  function Get_Type_Name
    (The_Message : in Unittest.TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_String;

  overriding
  function Byte_Size
    (The_Message : in out Unittest.TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;

  overriding
  function Get_Cached_Size
    (The_Message : in Unittest.TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;

  overriding
  function Is_Initialized
    (The_Message : in Unittest.TestFieldOrderings.Instance) return Boolean;

  overriding
  procedure Finalize (The_Message : in out Unittest.TestFieldOrderings.Instance);

  ---------------------------------------------------------------------------
  -- Field accessor declarations --------------------------------------------
  ---------------------------------------------------------------------------

  -- optional string my_string = 11;
  function Has_My_String
    (The_Message : in TestFieldOrderings.Instance) return Boolean;
  procedure Clear_My_String
    (The_Message : in out TestFieldOrderings.Instance);
  function Get_My_String
    (The_Message : in TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_String;
  function Get_My_String
    (The_Message : in out TestFieldOrderings.Instance; Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access;
  procedure Set_My_String
    (The_Message : in out TestFieldOrderings.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String);
  function Release_My_String
    (The_Message : in out TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access;

  -- optional int64 my_int = 1;
  function Has_My_Int
    (The_Message : in TestFieldOrderings.Instance) return Boolean;
  procedure Clear_My_Int
    (The_Message : in out TestFieldOrderings.Instance);
  function Get_My_Int
    (The_Message : in TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_My_Int
    (The_Message : in out TestFieldOrderings.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- optional float my_float = 101;
  function Has_My_Float
    (The_Message : in TestFieldOrderings.Instance) return Boolean;
  procedure Clear_My_Float
    (The_Message : in out TestFieldOrderings.Instance);
  function Get_My_Float
    (The_Message : in TestFieldOrderings.Instance) return Protocol_Buffers.Wire_Format.PB_Float;
  procedure Set_My_Float
    (The_Message : in out TestFieldOrderings.Instance;
     value : in Protocol_Buffers.Wire_Format.PB_Float);

private
  type Instance is new Protocol_Buffers.Message.Instance with record
    My_String : Protocol_Buffers.Wire_Format.PB_String_Access := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    My_Int : Protocol_Buffers.Wire_Format.PB_Int64 := 0;
    My_Float : Protocol_Buffers.Wire_Format.PB_Float := Protocol_Buffers.Wire_Format.PB_Float (0.00000);
    Has_Bits : Protocol_Buffers.Wire_Format.Has_Bits_Array_Type (0 .. (3 + 31) / 32) := (others => 0);
    Cached_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  end record;

  procedure Set_Has_My_String (The_Message : in out Unittest.TestFieldOrderings.Instance);
  procedure Clear_Has_My_String (The_Message : in out Unittest.TestFieldOrderings.Instance);
  procedure Set_Has_My_Int (The_Message : in out Unittest.TestFieldOrderings.Instance);
  procedure Clear_Has_My_Int (The_Message : in out Unittest.TestFieldOrderings.Instance);
  procedure Set_Has_My_Float (The_Message : in out Unittest.TestFieldOrderings.Instance);
  procedure Clear_Has_My_Float (The_Message : in out Unittest.TestFieldOrderings.Instance);
end Unittest.TestFieldOrderings;
