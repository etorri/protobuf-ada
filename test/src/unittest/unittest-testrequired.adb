-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package body Unittest.TestRequired is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.TestRequired.Instance) is
  begin
    if (The_Message.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      The_Message.A := 0;
      The_Message.Dummy2 := 0;
      The_Message.B := 0;
      The_Message.Dummy4 := 0;
      The_Message.Dummy5 := 0;
      The_Message.Dummy6 := 0;
      The_Message.Dummy7 := 0;
      The_Message.Dummy8 := 0;
    end if;
    if (The_Message.Has_Bits (8 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 8 mod 32)) /= 0 then
      The_Message.Dummy9 := 0;
      The_Message.Dummy10 := 0;
      The_Message.Dummy11 := 0;
      The_Message.Dummy12 := 0;
      The_Message.Dummy13 := 0;
      The_Message.Dummy14 := 0;
      The_Message.Dummy15 := 0;
      The_Message.Dummy16 := 0;
    end if;
    if (The_Message.Has_Bits (16 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 16 mod 32)) /= 0 then
      The_Message.Dummy17 := 0;
      The_Message.Dummy18 := 0;
      The_Message.Dummy19 := 0;
      The_Message.Dummy20 := 0;
      The_Message.Dummy21 := 0;
      The_Message.Dummy22 := 0;
      The_Message.Dummy23 := 0;
      The_Message.Dummy24 := 0;
    end if;
    if (The_Message.Has_Bits (24 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 24 mod 32)) /= 0 then
      The_Message.Dummy25 := 0;
      The_Message.Dummy26 := 0;
      The_Message.Dummy27 := 0;
      The_Message.Dummy28 := 0;
      The_Message.Dummy29 := 0;
      The_Message.Dummy30 := 0;
      The_Message.Dummy31 := 0;
      The_Message.Dummy32 := 0;
    end if;
    if (The_Message.Has_Bits (32 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 32 mod 32)) /= 0 then
      The_Message.C := 0;
    end if;
    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.TestRequired.Instance;
     From : in Unittest.TestRequired.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.TestRequired";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.TestRequired.Instance) return Boolean is
  begin
    if (The_Message.Has_Bits(0) and 16#00000005#) /= 16#00000005# then return False; end if;
    if (The_Message.Has_Bits(1) and 16#00000001#) /= 16#00000001# then return False; end if;
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.TestRequired.Instance;
     From : in Unittest.TestRequired.Instance) is
  begin
    if (From.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      -- required int32 a = 1;
      if From.Has_A then
        To.Set_A (From.A);
      end if;
      -- optional int32 dummy2 = 2;
      if From.Has_Dummy2 then
        To.Set_Dummy2 (From.Dummy2);
      end if;
      -- required int32 b = 3;
      if From.Has_B then
        To.Set_B (From.B);
      end if;
      -- optional int32 dummy4 = 4;
      if From.Has_Dummy4 then
        To.Set_Dummy4 (From.Dummy4);
      end if;
      -- optional int32 dummy5 = 5;
      if From.Has_Dummy5 then
        To.Set_Dummy5 (From.Dummy5);
      end if;
      -- optional int32 dummy6 = 6;
      if From.Has_Dummy6 then
        To.Set_Dummy6 (From.Dummy6);
      end if;
      -- optional int32 dummy7 = 7;
      if From.Has_Dummy7 then
        To.Set_Dummy7 (From.Dummy7);
      end if;
      -- optional int32 dummy8 = 8;
      if From.Has_Dummy8 then
        To.Set_Dummy8 (From.Dummy8);
      end if;
    end if;
    if (From.Has_Bits (8 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 8 mod 32)) /= 0 then
      -- optional int32 dummy9 = 9;
      if From.Has_Dummy9 then
        To.Set_Dummy9 (From.Dummy9);
      end if;
      -- optional int32 dummy10 = 10;
      if From.Has_Dummy10 then
        To.Set_Dummy10 (From.Dummy10);
      end if;
      -- optional int32 dummy11 = 11;
      if From.Has_Dummy11 then
        To.Set_Dummy11 (From.Dummy11);
      end if;
      -- optional int32 dummy12 = 12;
      if From.Has_Dummy12 then
        To.Set_Dummy12 (From.Dummy12);
      end if;
      -- optional int32 dummy13 = 13;
      if From.Has_Dummy13 then
        To.Set_Dummy13 (From.Dummy13);
      end if;
      -- optional int32 dummy14 = 14;
      if From.Has_Dummy14 then
        To.Set_Dummy14 (From.Dummy14);
      end if;
      -- optional int32 dummy15 = 15;
      if From.Has_Dummy15 then
        To.Set_Dummy15 (From.Dummy15);
      end if;
      -- optional int32 dummy16 = 16;
      if From.Has_Dummy16 then
        To.Set_Dummy16 (From.Dummy16);
      end if;
    end if;
    if (From.Has_Bits (16 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 16 mod 32)) /= 0 then
      -- optional int32 dummy17 = 17;
      if From.Has_Dummy17 then
        To.Set_Dummy17 (From.Dummy17);
      end if;
      -- optional int32 dummy18 = 18;
      if From.Has_Dummy18 then
        To.Set_Dummy18 (From.Dummy18);
      end if;
      -- optional int32 dummy19 = 19;
      if From.Has_Dummy19 then
        To.Set_Dummy19 (From.Dummy19);
      end if;
      -- optional int32 dummy20 = 20;
      if From.Has_Dummy20 then
        To.Set_Dummy20 (From.Dummy20);
      end if;
      -- optional int32 dummy21 = 21;
      if From.Has_Dummy21 then
        To.Set_Dummy21 (From.Dummy21);
      end if;
      -- optional int32 dummy22 = 22;
      if From.Has_Dummy22 then
        To.Set_Dummy22 (From.Dummy22);
      end if;
      -- optional int32 dummy23 = 23;
      if From.Has_Dummy23 then
        To.Set_Dummy23 (From.Dummy23);
      end if;
      -- optional int32 dummy24 = 24;
      if From.Has_Dummy24 then
        To.Set_Dummy24 (From.Dummy24);
      end if;
    end if;
    if (From.Has_Bits (24 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 24 mod 32)) /= 0 then
      -- optional int32 dummy25 = 25;
      if From.Has_Dummy25 then
        To.Set_Dummy25 (From.Dummy25);
      end if;
      -- optional int32 dummy26 = 26;
      if From.Has_Dummy26 then
        To.Set_Dummy26 (From.Dummy26);
      end if;
      -- optional int32 dummy27 = 27;
      if From.Has_Dummy27 then
        To.Set_Dummy27 (From.Dummy27);
      end if;
      -- optional int32 dummy28 = 28;
      if From.Has_Dummy28 then
        To.Set_Dummy28 (From.Dummy28);
      end if;
      -- optional int32 dummy29 = 29;
      if From.Has_Dummy29 then
        To.Set_Dummy29 (From.Dummy29);
      end if;
      -- optional int32 dummy30 = 30;
      if From.Has_Dummy30 then
        To.Set_Dummy30 (From.Dummy30);
      end if;
      -- optional int32 dummy31 = 31;
      if From.Has_Dummy31 then
        To.Set_Dummy31 (From.Dummy31);
      end if;
      -- optional int32 dummy32 = 32;
      if From.Has_Dummy32 then
        To.Set_Dummy32 (From.Dummy32);
      end if;
    end if;
    if (From.Has_Bits (32 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 32 mod 32)) /= 0 then
      -- required int32 c = 33;
      if From.Has_C then
        To.Set_C (From.C);
      end if;
    end if;
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    if (The_Message.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      -- required int32 a = 1;
      if The_Message.Has_A then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.A);
      end if;
      -- optional int32 dummy2 = 2;
      if The_Message.Has_Dummy2 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy2);
      end if;
      -- required int32 b = 3;
      if The_Message.Has_B then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.B);
      end if;
      -- optional int32 dummy4 = 4;
      if The_Message.Has_Dummy4 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy4);
      end if;
      -- optional int32 dummy5 = 5;
      if The_Message.Has_Dummy5 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy5);
      end if;
      -- optional int32 dummy6 = 6;
      if The_Message.Has_Dummy6 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy6);
      end if;
      -- optional int32 dummy7 = 7;
      if The_Message.Has_Dummy7 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy7);
      end if;
      -- optional int32 dummy8 = 8;
      if The_Message.Has_Dummy8 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy8);
      end if;
    end if;
    if (The_Message.Has_Bits (8 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 8 mod 32)) /= 0 then
      -- optional int32 dummy9 = 9;
      if The_Message.Has_Dummy9 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy9);
      end if;
      -- optional int32 dummy10 = 10;
      if The_Message.Has_Dummy10 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy10);
      end if;
      -- optional int32 dummy11 = 11;
      if The_Message.Has_Dummy11 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy11);
      end if;
      -- optional int32 dummy12 = 12;
      if The_Message.Has_Dummy12 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy12);
      end if;
      -- optional int32 dummy13 = 13;
      if The_Message.Has_Dummy13 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy13);
      end if;
      -- optional int32 dummy14 = 14;
      if The_Message.Has_Dummy14 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy14);
      end if;
      -- optional int32 dummy15 = 15;
      if The_Message.Has_Dummy15 then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy15);
      end if;
      -- optional int32 dummy16 = 16;
      if The_Message.Has_Dummy16 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy16);
      end if;
    end if;
    if (The_Message.Has_Bits (16 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 16 mod 32)) /= 0 then
      -- optional int32 dummy17 = 17;
      if The_Message.Has_Dummy17 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy17);
      end if;
      -- optional int32 dummy18 = 18;
      if The_Message.Has_Dummy18 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy18);
      end if;
      -- optional int32 dummy19 = 19;
      if The_Message.Has_Dummy19 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy19);
      end if;
      -- optional int32 dummy20 = 20;
      if The_Message.Has_Dummy20 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy20);
      end if;
      -- optional int32 dummy21 = 21;
      if The_Message.Has_Dummy21 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy21);
      end if;
      -- optional int32 dummy22 = 22;
      if The_Message.Has_Dummy22 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy22);
      end if;
      -- optional int32 dummy23 = 23;
      if The_Message.Has_Dummy23 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy23);
      end if;
      -- optional int32 dummy24 = 24;
      if The_Message.Has_Dummy24 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy24);
      end if;
    end if;
    if (The_Message.Has_Bits (24 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 24 mod 32)) /= 0 then
      -- optional int32 dummy25 = 25;
      if The_Message.Has_Dummy25 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy25);
      end if;
      -- optional int32 dummy26 = 26;
      if The_Message.Has_Dummy26 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy26);
      end if;
      -- optional int32 dummy27 = 27;
      if The_Message.Has_Dummy27 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy27);
      end if;
      -- optional int32 dummy28 = 28;
      if The_Message.Has_Dummy28 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy28);
      end if;
      -- optional int32 dummy29 = 29;
      if The_Message.Has_Dummy29 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy29);
      end if;
      -- optional int32 dummy30 = 30;
      if The_Message.Has_Dummy30 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy30);
      end if;
      -- optional int32 dummy31 = 31;
      if The_Message.Has_Dummy31 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy31);
      end if;
      -- optional int32 dummy32 = 32;
      if The_Message.Has_Dummy32 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Dummy32);
      end if;
    end if;
    if (The_Message.Has_Bits (32 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 32 mod 32)) /= 0 then
      -- required int32 c = 33;
      if The_Message.Has_C then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.C);
      end if;
    end if;
    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestRequired.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- required int32 a = 1;
    if The_Message.Has_A then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 1, The_Message.A);
    end if;
    -- optional int32 dummy2 = 2;
    if The_Message.Has_Dummy2 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 2, The_Message.Dummy2);
    end if;
    -- required int32 b = 3;
    if The_Message.Has_B then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 3, The_Message.B);
    end if;
    -- optional int32 dummy4 = 4;
    if The_Message.Has_Dummy4 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 4, The_Message.Dummy4);
    end if;
    -- optional int32 dummy5 = 5;
    if The_Message.Has_Dummy5 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 5, The_Message.Dummy5);
    end if;
    -- optional int32 dummy6 = 6;
    if The_Message.Has_Dummy6 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 6, The_Message.Dummy6);
    end if;
    -- optional int32 dummy7 = 7;
    if The_Message.Has_Dummy7 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 7, The_Message.Dummy7);
    end if;
    -- optional int32 dummy8 = 8;
    if The_Message.Has_Dummy8 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 8, The_Message.Dummy8);
    end if;
    -- optional int32 dummy9 = 9;
    if The_Message.Has_Dummy9 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 9, The_Message.Dummy9);
    end if;
    -- optional int32 dummy10 = 10;
    if The_Message.Has_Dummy10 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 10, The_Message.Dummy10);
    end if;
    -- optional int32 dummy11 = 11;
    if The_Message.Has_Dummy11 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 11, The_Message.Dummy11);
    end if;
    -- optional int32 dummy12 = 12;
    if The_Message.Has_Dummy12 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 12, The_Message.Dummy12);
    end if;
    -- optional int32 dummy13 = 13;
    if The_Message.Has_Dummy13 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 13, The_Message.Dummy13);
    end if;
    -- optional int32 dummy14 = 14;
    if The_Message.Has_Dummy14 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 14, The_Message.Dummy14);
    end if;
    -- optional int32 dummy15 = 15;
    if The_Message.Has_Dummy15 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 15, The_Message.Dummy15);
    end if;
    -- optional int32 dummy16 = 16;
    if The_Message.Has_Dummy16 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 16, The_Message.Dummy16);
    end if;
    -- optional int32 dummy17 = 17;
    if The_Message.Has_Dummy17 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 17, The_Message.Dummy17);
    end if;
    -- optional int32 dummy18 = 18;
    if The_Message.Has_Dummy18 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 18, The_Message.Dummy18);
    end if;
    -- optional int32 dummy19 = 19;
    if The_Message.Has_Dummy19 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 19, The_Message.Dummy19);
    end if;
    -- optional int32 dummy20 = 20;
    if The_Message.Has_Dummy20 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 20, The_Message.Dummy20);
    end if;
    -- optional int32 dummy21 = 21;
    if The_Message.Has_Dummy21 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 21, The_Message.Dummy21);
    end if;
    -- optional int32 dummy22 = 22;
    if The_Message.Has_Dummy22 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 22, The_Message.Dummy22);
    end if;
    -- optional int32 dummy23 = 23;
    if The_Message.Has_Dummy23 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 23, The_Message.Dummy23);
    end if;
    -- optional int32 dummy24 = 24;
    if The_Message.Has_Dummy24 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 24, The_Message.Dummy24);
    end if;
    -- optional int32 dummy25 = 25;
    if The_Message.Has_Dummy25 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 25, The_Message.Dummy25);
    end if;
    -- optional int32 dummy26 = 26;
    if The_Message.Has_Dummy26 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 26, The_Message.Dummy26);
    end if;
    -- optional int32 dummy27 = 27;
    if The_Message.Has_Dummy27 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 27, The_Message.Dummy27);
    end if;
    -- optional int32 dummy28 = 28;
    if The_Message.Has_Dummy28 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 28, The_Message.Dummy28);
    end if;
    -- optional int32 dummy29 = 29;
    if The_Message.Has_Dummy29 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 29, The_Message.Dummy29);
    end if;
    -- optional int32 dummy30 = 30;
    if The_Message.Has_Dummy30 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 30, The_Message.Dummy30);
    end if;
    -- optional int32 dummy31 = 31;
    if The_Message.Has_Dummy31 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 31, The_Message.Dummy31);
    end if;
    -- optional int32 dummy32 = 32;
    if The_Message.Has_Dummy32 then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 32, The_Message.Dummy32);
    end if;
    -- required int32 c = 33;
    if The_Message.Has_C then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 33, The_Message.C);
    end if;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestRequired.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- required int32 a = 1;
      when 1 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.A := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_A;
        end if;
      -- optional int32 dummy2 = 2;
      when 2 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy2 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy2;
        end if;
      -- required int32 b = 3;
      when 3 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.B := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_B;
        end if;
      -- optional int32 dummy4 = 4;
      when 4 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy4 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy4;
        end if;
      -- optional int32 dummy5 = 5;
      when 5 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy5 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy5;
        end if;
      -- optional int32 dummy6 = 6;
      when 6 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy6 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy6;
        end if;
      -- optional int32 dummy7 = 7;
      when 7 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy7 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy7;
        end if;
      -- optional int32 dummy8 = 8;
      when 8 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy8 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy8;
        end if;
      -- optional int32 dummy9 = 9;
      when 9 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy9 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy9;
        end if;
      -- optional int32 dummy10 = 10;
      when 10 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy10 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy10;
        end if;
      -- optional int32 dummy11 = 11;
      when 11 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy11 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy11;
        end if;
      -- optional int32 dummy12 = 12;
      when 12 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy12 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy12;
        end if;
      -- optional int32 dummy13 = 13;
      when 13 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy13 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy13;
        end if;
      -- optional int32 dummy14 = 14;
      when 14 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy14 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy14;
        end if;
      -- optional int32 dummy15 = 15;
      when 15 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy15 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy15;
        end if;
      -- optional int32 dummy16 = 16;
      when 16 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy16 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy16;
        end if;
      -- optional int32 dummy17 = 17;
      when 17 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy17 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy17;
        end if;
      -- optional int32 dummy18 = 18;
      when 18 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy18 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy18;
        end if;
      -- optional int32 dummy19 = 19;
      when 19 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy19 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy19;
        end if;
      -- optional int32 dummy20 = 20;
      when 20 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy20 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy20;
        end if;
      -- optional int32 dummy21 = 21;
      when 21 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy21 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy21;
        end if;
      -- optional int32 dummy22 = 22;
      when 22 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy22 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy22;
        end if;
      -- optional int32 dummy23 = 23;
      when 23 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy23 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy23;
        end if;
      -- optional int32 dummy24 = 24;
      when 24 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy24 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy24;
        end if;
      -- optional int32 dummy25 = 25;
      when 25 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy25 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy25;
        end if;
      -- optional int32 dummy26 = 26;
      when 26 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy26 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy26;
        end if;
      -- optional int32 dummy27 = 27;
      when 27 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy27 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy27;
        end if;
      -- optional int32 dummy28 = 28;
      when 28 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy28 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy28;
        end if;
      -- optional int32 dummy29 = 29;
      when 29 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy29 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy29;
        end if;
      -- optional int32 dummy30 = 30;
      when 30 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy30 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy30;
        end if;
      -- optional int32 dummy31 = 31;
      when 31 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy31 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy31;
        end if;
      -- optional int32 dummy32 = 32;
      when 32 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Dummy32 := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Dummy32;
        end if;
      -- required int32 c = 33;
      when 33 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.C := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_C;
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.TestRequired.Instance) is
  begin
    null;
  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- required int32 a = 1;
  function Has_A
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000001#) /= 0;
  end Has_A;

  procedure Set_Has_A
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000001#;
  end Set_Has_A;

  procedure Clear_Has_A
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000001#);
  end Clear_Has_A;

  procedure Clear_A
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.A := 0;
    The_Message.Clear_Has_A;
  end Clear_A;

  function Get_A
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.A;
  end Get_A;

  procedure Set_A
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_A;
    The_Message.A := Value;
  end Set_A;

  -- optional int32 dummy2 = 2;
  function Has_Dummy2
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000002#) /= 0;
  end Has_Dummy2;

  procedure Set_Has_Dummy2
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000002#;
  end Set_Has_Dummy2;

  procedure Clear_Has_Dummy2
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000002#);
  end Clear_Has_Dummy2;

  procedure Clear_Dummy2
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy2 := 0;
    The_Message.Clear_Has_Dummy2;
  end Clear_Dummy2;

  function Get_Dummy2
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy2;
  end Get_Dummy2;

  procedure Set_Dummy2
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy2;
    The_Message.Dummy2 := Value;
  end Set_Dummy2;

  -- required int32 b = 3;
  function Has_B
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000004#) /= 0;
  end Has_B;

  procedure Set_Has_B
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000004#;
  end Set_Has_B;

  procedure Clear_Has_B
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000004#);
  end Clear_Has_B;

  procedure Clear_B
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.B := 0;
    The_Message.Clear_Has_B;
  end Clear_B;

  function Get_B
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.B;
  end Get_B;

  procedure Set_B
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_B;
    The_Message.B := Value;
  end Set_B;

  -- optional int32 dummy4 = 4;
  function Has_Dummy4
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000008#) /= 0;
  end Has_Dummy4;

  procedure Set_Has_Dummy4
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000008#;
  end Set_Has_Dummy4;

  procedure Clear_Has_Dummy4
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000008#);
  end Clear_Has_Dummy4;

  procedure Clear_Dummy4
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy4 := 0;
    The_Message.Clear_Has_Dummy4;
  end Clear_Dummy4;

  function Get_Dummy4
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy4;
  end Get_Dummy4;

  procedure Set_Dummy4
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy4;
    The_Message.Dummy4 := Value;
  end Set_Dummy4;

  -- optional int32 dummy5 = 5;
  function Has_Dummy5
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000010#) /= 0;
  end Has_Dummy5;

  procedure Set_Has_Dummy5
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000010#;
  end Set_Has_Dummy5;

  procedure Clear_Has_Dummy5
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000010#);
  end Clear_Has_Dummy5;

  procedure Clear_Dummy5
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy5 := 0;
    The_Message.Clear_Has_Dummy5;
  end Clear_Dummy5;

  function Get_Dummy5
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy5;
  end Get_Dummy5;

  procedure Set_Dummy5
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy5;
    The_Message.Dummy5 := Value;
  end Set_Dummy5;

  -- optional int32 dummy6 = 6;
  function Has_Dummy6
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000020#) /= 0;
  end Has_Dummy6;

  procedure Set_Has_Dummy6
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000020#;
  end Set_Has_Dummy6;

  procedure Clear_Has_Dummy6
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000020#);
  end Clear_Has_Dummy6;

  procedure Clear_Dummy6
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy6 := 0;
    The_Message.Clear_Has_Dummy6;
  end Clear_Dummy6;

  function Get_Dummy6
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy6;
  end Get_Dummy6;

  procedure Set_Dummy6
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy6;
    The_Message.Dummy6 := Value;
  end Set_Dummy6;

  -- optional int32 dummy7 = 7;
  function Has_Dummy7
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000040#) /= 0;
  end Has_Dummy7;

  procedure Set_Has_Dummy7
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000040#;
  end Set_Has_Dummy7;

  procedure Clear_Has_Dummy7
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000040#);
  end Clear_Has_Dummy7;

  procedure Clear_Dummy7
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy7 := 0;
    The_Message.Clear_Has_Dummy7;
  end Clear_Dummy7;

  function Get_Dummy7
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy7;
  end Get_Dummy7;

  procedure Set_Dummy7
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy7;
    The_Message.Dummy7 := Value;
  end Set_Dummy7;

  -- optional int32 dummy8 = 8;
  function Has_Dummy8
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000080#) /= 0;
  end Has_Dummy8;

  procedure Set_Has_Dummy8
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000080#;
  end Set_Has_Dummy8;

  procedure Clear_Has_Dummy8
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000080#);
  end Clear_Has_Dummy8;

  procedure Clear_Dummy8
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy8 := 0;
    The_Message.Clear_Has_Dummy8;
  end Clear_Dummy8;

  function Get_Dummy8
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy8;
  end Get_Dummy8;

  procedure Set_Dummy8
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy8;
    The_Message.Dummy8 := Value;
  end Set_Dummy8;

  -- optional int32 dummy9 = 9;
  function Has_Dummy9
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000100#) /= 0;
  end Has_Dummy9;

  procedure Set_Has_Dummy9
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000100#;
  end Set_Has_Dummy9;

  procedure Clear_Has_Dummy9
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000100#);
  end Clear_Has_Dummy9;

  procedure Clear_Dummy9
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy9 := 0;
    The_Message.Clear_Has_Dummy9;
  end Clear_Dummy9;

  function Get_Dummy9
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy9;
  end Get_Dummy9;

  procedure Set_Dummy9
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy9;
    The_Message.Dummy9 := Value;
  end Set_Dummy9;

  -- optional int32 dummy10 = 10;
  function Has_Dummy10
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000200#) /= 0;
  end Has_Dummy10;

  procedure Set_Has_Dummy10
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000200#;
  end Set_Has_Dummy10;

  procedure Clear_Has_Dummy10
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000200#);
  end Clear_Has_Dummy10;

  procedure Clear_Dummy10
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy10 := 0;
    The_Message.Clear_Has_Dummy10;
  end Clear_Dummy10;

  function Get_Dummy10
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy10;
  end Get_Dummy10;

  procedure Set_Dummy10
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy10;
    The_Message.Dummy10 := Value;
  end Set_Dummy10;

  -- optional int32 dummy11 = 11;
  function Has_Dummy11
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000400#) /= 0;
  end Has_Dummy11;

  procedure Set_Has_Dummy11
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000400#;
  end Set_Has_Dummy11;

  procedure Clear_Has_Dummy11
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000400#);
  end Clear_Has_Dummy11;

  procedure Clear_Dummy11
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy11 := 0;
    The_Message.Clear_Has_Dummy11;
  end Clear_Dummy11;

  function Get_Dummy11
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy11;
  end Get_Dummy11;

  procedure Set_Dummy11
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy11;
    The_Message.Dummy11 := Value;
  end Set_Dummy11;

  -- optional int32 dummy12 = 12;
  function Has_Dummy12
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000800#) /= 0;
  end Has_Dummy12;

  procedure Set_Has_Dummy12
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000800#;
  end Set_Has_Dummy12;

  procedure Clear_Has_Dummy12
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000800#);
  end Clear_Has_Dummy12;

  procedure Clear_Dummy12
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy12 := 0;
    The_Message.Clear_Has_Dummy12;
  end Clear_Dummy12;

  function Get_Dummy12
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy12;
  end Get_Dummy12;

  procedure Set_Dummy12
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy12;
    The_Message.Dummy12 := Value;
  end Set_Dummy12;

  -- optional int32 dummy13 = 13;
  function Has_Dummy13
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00001000#) /= 0;
  end Has_Dummy13;

  procedure Set_Has_Dummy13
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00001000#;
  end Set_Has_Dummy13;

  procedure Clear_Has_Dummy13
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00001000#);
  end Clear_Has_Dummy13;

  procedure Clear_Dummy13
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy13 := 0;
    The_Message.Clear_Has_Dummy13;
  end Clear_Dummy13;

  function Get_Dummy13
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy13;
  end Get_Dummy13;

  procedure Set_Dummy13
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy13;
    The_Message.Dummy13 := Value;
  end Set_Dummy13;

  -- optional int32 dummy14 = 14;
  function Has_Dummy14
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00002000#) /= 0;
  end Has_Dummy14;

  procedure Set_Has_Dummy14
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00002000#;
  end Set_Has_Dummy14;

  procedure Clear_Has_Dummy14
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00002000#);
  end Clear_Has_Dummy14;

  procedure Clear_Dummy14
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy14 := 0;
    The_Message.Clear_Has_Dummy14;
  end Clear_Dummy14;

  function Get_Dummy14
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy14;
  end Get_Dummy14;

  procedure Set_Dummy14
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy14;
    The_Message.Dummy14 := Value;
  end Set_Dummy14;

  -- optional int32 dummy15 = 15;
  function Has_Dummy15
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00004000#) /= 0;
  end Has_Dummy15;

  procedure Set_Has_Dummy15
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00004000#;
  end Set_Has_Dummy15;

  procedure Clear_Has_Dummy15
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00004000#);
  end Clear_Has_Dummy15;

  procedure Clear_Dummy15
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy15 := 0;
    The_Message.Clear_Has_Dummy15;
  end Clear_Dummy15;

  function Get_Dummy15
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy15;
  end Get_Dummy15;

  procedure Set_Dummy15
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy15;
    The_Message.Dummy15 := Value;
  end Set_Dummy15;

  -- optional int32 dummy16 = 16;
  function Has_Dummy16
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00008000#) /= 0;
  end Has_Dummy16;

  procedure Set_Has_Dummy16
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00008000#;
  end Set_Has_Dummy16;

  procedure Clear_Has_Dummy16
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00008000#);
  end Clear_Has_Dummy16;

  procedure Clear_Dummy16
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy16 := 0;
    The_Message.Clear_Has_Dummy16;
  end Clear_Dummy16;

  function Get_Dummy16
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy16;
  end Get_Dummy16;

  procedure Set_Dummy16
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy16;
    The_Message.Dummy16 := Value;
  end Set_Dummy16;

  -- optional int32 dummy17 = 17;
  function Has_Dummy17
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00010000#) /= 0;
  end Has_Dummy17;

  procedure Set_Has_Dummy17
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00010000#;
  end Set_Has_Dummy17;

  procedure Clear_Has_Dummy17
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00010000#);
  end Clear_Has_Dummy17;

  procedure Clear_Dummy17
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy17 := 0;
    The_Message.Clear_Has_Dummy17;
  end Clear_Dummy17;

  function Get_Dummy17
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy17;
  end Get_Dummy17;

  procedure Set_Dummy17
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy17;
    The_Message.Dummy17 := Value;
  end Set_Dummy17;

  -- optional int32 dummy18 = 18;
  function Has_Dummy18
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00020000#) /= 0;
  end Has_Dummy18;

  procedure Set_Has_Dummy18
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00020000#;
  end Set_Has_Dummy18;

  procedure Clear_Has_Dummy18
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00020000#);
  end Clear_Has_Dummy18;

  procedure Clear_Dummy18
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy18 := 0;
    The_Message.Clear_Has_Dummy18;
  end Clear_Dummy18;

  function Get_Dummy18
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy18;
  end Get_Dummy18;

  procedure Set_Dummy18
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy18;
    The_Message.Dummy18 := Value;
  end Set_Dummy18;

  -- optional int32 dummy19 = 19;
  function Has_Dummy19
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00040000#) /= 0;
  end Has_Dummy19;

  procedure Set_Has_Dummy19
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00040000#;
  end Set_Has_Dummy19;

  procedure Clear_Has_Dummy19
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00040000#);
  end Clear_Has_Dummy19;

  procedure Clear_Dummy19
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy19 := 0;
    The_Message.Clear_Has_Dummy19;
  end Clear_Dummy19;

  function Get_Dummy19
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy19;
  end Get_Dummy19;

  procedure Set_Dummy19
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy19;
    The_Message.Dummy19 := Value;
  end Set_Dummy19;

  -- optional int32 dummy20 = 20;
  function Has_Dummy20
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00080000#) /= 0;
  end Has_Dummy20;

  procedure Set_Has_Dummy20
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00080000#;
  end Set_Has_Dummy20;

  procedure Clear_Has_Dummy20
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00080000#);
  end Clear_Has_Dummy20;

  procedure Clear_Dummy20
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy20 := 0;
    The_Message.Clear_Has_Dummy20;
  end Clear_Dummy20;

  function Get_Dummy20
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy20;
  end Get_Dummy20;

  procedure Set_Dummy20
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy20;
    The_Message.Dummy20 := Value;
  end Set_Dummy20;

  -- optional int32 dummy21 = 21;
  function Has_Dummy21
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00100000#) /= 0;
  end Has_Dummy21;

  procedure Set_Has_Dummy21
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00100000#;
  end Set_Has_Dummy21;

  procedure Clear_Has_Dummy21
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00100000#);
  end Clear_Has_Dummy21;

  procedure Clear_Dummy21
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy21 := 0;
    The_Message.Clear_Has_Dummy21;
  end Clear_Dummy21;

  function Get_Dummy21
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy21;
  end Get_Dummy21;

  procedure Set_Dummy21
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy21;
    The_Message.Dummy21 := Value;
  end Set_Dummy21;

  -- optional int32 dummy22 = 22;
  function Has_Dummy22
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00200000#) /= 0;
  end Has_Dummy22;

  procedure Set_Has_Dummy22
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00200000#;
  end Set_Has_Dummy22;

  procedure Clear_Has_Dummy22
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00200000#);
  end Clear_Has_Dummy22;

  procedure Clear_Dummy22
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy22 := 0;
    The_Message.Clear_Has_Dummy22;
  end Clear_Dummy22;

  function Get_Dummy22
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy22;
  end Get_Dummy22;

  procedure Set_Dummy22
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy22;
    The_Message.Dummy22 := Value;
  end Set_Dummy22;

  -- optional int32 dummy23 = 23;
  function Has_Dummy23
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00400000#) /= 0;
  end Has_Dummy23;

  procedure Set_Has_Dummy23
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00400000#;
  end Set_Has_Dummy23;

  procedure Clear_Has_Dummy23
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00400000#);
  end Clear_Has_Dummy23;

  procedure Clear_Dummy23
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy23 := 0;
    The_Message.Clear_Has_Dummy23;
  end Clear_Dummy23;

  function Get_Dummy23
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy23;
  end Get_Dummy23;

  procedure Set_Dummy23
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy23;
    The_Message.Dummy23 := Value;
  end Set_Dummy23;

  -- optional int32 dummy24 = 24;
  function Has_Dummy24
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00800000#) /= 0;
  end Has_Dummy24;

  procedure Set_Has_Dummy24
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00800000#;
  end Set_Has_Dummy24;

  procedure Clear_Has_Dummy24
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00800000#);
  end Clear_Has_Dummy24;

  procedure Clear_Dummy24
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy24 := 0;
    The_Message.Clear_Has_Dummy24;
  end Clear_Dummy24;

  function Get_Dummy24
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy24;
  end Get_Dummy24;

  procedure Set_Dummy24
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy24;
    The_Message.Dummy24 := Value;
  end Set_Dummy24;

  -- optional int32 dummy25 = 25;
  function Has_Dummy25
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#01000000#) /= 0;
  end Has_Dummy25;

  procedure Set_Has_Dummy25
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#01000000#;
  end Set_Has_Dummy25;

  procedure Clear_Has_Dummy25
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#01000000#);
  end Clear_Has_Dummy25;

  procedure Clear_Dummy25
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy25 := 0;
    The_Message.Clear_Has_Dummy25;
  end Clear_Dummy25;

  function Get_Dummy25
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy25;
  end Get_Dummy25;

  procedure Set_Dummy25
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy25;
    The_Message.Dummy25 := Value;
  end Set_Dummy25;

  -- optional int32 dummy26 = 26;
  function Has_Dummy26
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#02000000#) /= 0;
  end Has_Dummy26;

  procedure Set_Has_Dummy26
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#02000000#;
  end Set_Has_Dummy26;

  procedure Clear_Has_Dummy26
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#02000000#);
  end Clear_Has_Dummy26;

  procedure Clear_Dummy26
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy26 := 0;
    The_Message.Clear_Has_Dummy26;
  end Clear_Dummy26;

  function Get_Dummy26
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy26;
  end Get_Dummy26;

  procedure Set_Dummy26
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy26;
    The_Message.Dummy26 := Value;
  end Set_Dummy26;

  -- optional int32 dummy27 = 27;
  function Has_Dummy27
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#04000000#) /= 0;
  end Has_Dummy27;

  procedure Set_Has_Dummy27
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#04000000#;
  end Set_Has_Dummy27;

  procedure Clear_Has_Dummy27
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#04000000#);
  end Clear_Has_Dummy27;

  procedure Clear_Dummy27
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy27 := 0;
    The_Message.Clear_Has_Dummy27;
  end Clear_Dummy27;

  function Get_Dummy27
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy27;
  end Get_Dummy27;

  procedure Set_Dummy27
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy27;
    The_Message.Dummy27 := Value;
  end Set_Dummy27;

  -- optional int32 dummy28 = 28;
  function Has_Dummy28
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#08000000#) /= 0;
  end Has_Dummy28;

  procedure Set_Has_Dummy28
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#08000000#;
  end Set_Has_Dummy28;

  procedure Clear_Has_Dummy28
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#08000000#);
  end Clear_Has_Dummy28;

  procedure Clear_Dummy28
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy28 := 0;
    The_Message.Clear_Has_Dummy28;
  end Clear_Dummy28;

  function Get_Dummy28
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy28;
  end Get_Dummy28;

  procedure Set_Dummy28
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy28;
    The_Message.Dummy28 := Value;
  end Set_Dummy28;

  -- optional int32 dummy29 = 29;
  function Has_Dummy29
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#10000000#) /= 0;
  end Has_Dummy29;

  procedure Set_Has_Dummy29
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#10000000#;
  end Set_Has_Dummy29;

  procedure Clear_Has_Dummy29
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#10000000#);
  end Clear_Has_Dummy29;

  procedure Clear_Dummy29
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy29 := 0;
    The_Message.Clear_Has_Dummy29;
  end Clear_Dummy29;

  function Get_Dummy29
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy29;
  end Get_Dummy29;

  procedure Set_Dummy29
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy29;
    The_Message.Dummy29 := Value;
  end Set_Dummy29;

  -- optional int32 dummy30 = 30;
  function Has_Dummy30
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#20000000#) /= 0;
  end Has_Dummy30;

  procedure Set_Has_Dummy30
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#20000000#;
  end Set_Has_Dummy30;

  procedure Clear_Has_Dummy30
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#20000000#);
  end Clear_Has_Dummy30;

  procedure Clear_Dummy30
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy30 := 0;
    The_Message.Clear_Has_Dummy30;
  end Clear_Dummy30;

  function Get_Dummy30
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy30;
  end Get_Dummy30;

  procedure Set_Dummy30
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy30;
    The_Message.Dummy30 := Value;
  end Set_Dummy30;

  -- optional int32 dummy31 = 31;
  function Has_Dummy31
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#40000000#) /= 0;
  end Has_Dummy31;

  procedure Set_Has_Dummy31
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#40000000#;
  end Set_Has_Dummy31;

  procedure Clear_Has_Dummy31
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#40000000#);
  end Clear_Has_Dummy31;

  procedure Clear_Dummy31
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy31 := 0;
    The_Message.Clear_Has_Dummy31;
  end Clear_Dummy31;

  function Get_Dummy31
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy31;
  end Get_Dummy31;

  procedure Set_Dummy31
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy31;
    The_Message.Dummy31 := Value;
  end Set_Dummy31;

  -- optional int32 dummy32 = 32;
  function Has_Dummy32
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#80000000#) /= 0;
  end Has_Dummy32;

  procedure Set_Has_Dummy32
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#80000000#;
  end Set_Has_Dummy32;

  procedure Clear_Has_Dummy32
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#80000000#);
  end Clear_Has_Dummy32;

  procedure Clear_Dummy32
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Dummy32 := 0;
    The_Message.Clear_Has_Dummy32;
  end Clear_Dummy32;

  function Get_Dummy32
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Dummy32;
  end Get_Dummy32;

  procedure Set_Dummy32
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Dummy32;
    The_Message.Dummy32 := Value;
  end Set_Dummy32;

  -- required int32 c = 33;
  function Has_C
    (The_Message : in TestRequired.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(1) and 16#00000001#) /= 0;
  end Has_C;

  procedure Set_Has_C
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(1) := The_Message.Has_Bits(1) or 16#00000001#;
  end Set_Has_C;

  procedure Clear_Has_C
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.Has_Bits(1) := The_Message.Has_Bits(1) and (not 16#00000001#);
  end Clear_Has_C;

  procedure Clear_C
    (The_Message : in out TestRequired.Instance) is
  begin
    The_Message.C := 0;
    The_Message.Clear_Has_C;
  end Clear_C;

  function Get_C
    (The_Message : in TestRequired.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.C;
  end Get_C;

  procedure Set_C
    (The_Message : in out TestRequired.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_C;
    The_Message.C := Value;
  end Set_C;

end Unittest.TestRequired;
