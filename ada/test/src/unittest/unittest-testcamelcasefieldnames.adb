-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

with Unittest.ForeignMessage;

package body Unittest.TestCamelCaseFieldNames is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.TestCamelCaseFieldNames.Instance) is
  begin
    if (The_Message.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      The_Message.Primitivefield := 0;
      if The_Message.Has_Stringfield then
        The_Message.Clear_Has_Stringfield;
        declare
          procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
        begin
          if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
            Free (The_Message.Stringfield);
          end if;
        end;
        The_Message.Stringfield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
      end if;
      The_Message.Enumfield := ForeignEnum'(FOREIGN_FOO);
      if The_Message.Has_Messagefield then
        The_Message.Clear_Has_Messagefield;
        declare
          Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access(The_Message.Messagefield);
        begin
          Protocol_Buffers.Message.Free (Temp);
          The_Message.Messagefield := null;
        end;
      end if;
      if The_Message.Has_Stringpiecefield then
        The_Message.Clear_Has_Stringpiecefield;
        declare
          procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
        begin
          if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
            Free (The_Message.Stringpiecefield);
          end if;
        end;
        The_Message.Stringpiecefield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
      end if;
      if The_Message.Has_Cordfield then
        The_Message.Clear_Has_Cordfield;
        declare
          procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
        begin
          if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
            Free (The_Message.Cordfield);
          end if;
        end;
        The_Message.Cordfield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
      end if;
    end if;
    The_Message.Repeatedprimitivefield.Clear;
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedstringfield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedstringfield.Clear;

    The_Message.Repeatedenumfield.Clear;
    for C in The_Message.Repeatedmessagefield.Iterate loop
      Protocol_Buffers.Message.Free (The_Message.Repeatedmessagefield.Reference (C).Element.all);
    end loop;
    The_Message.Repeatedmessagefield.Clear;

    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedstringpiecefield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedstringpiecefield.Clear;

    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedcordfield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedcordfield.Clear;

    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.TestCamelCaseFieldNames.Instance;
     From : in Unittest.TestCamelCaseFieldNames.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.TestCamelCaseFieldNames";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.TestCamelCaseFieldNames.Instance;
     From : in Unittest.TestCamelCaseFieldNames.Instance) is
  begin
    To.Repeatedprimitivefield.Append(From.Repeatedprimitivefield);
    for E of From.Repeatedstringfield loop
      To.Repeatedstringfield.Append (new Protocol_Buffers.Wire_Format.PB_String'(E.all));
    end loop;
    To.Repeatedenumfield.Append (From.Repeatedenumfield);
    declare
      Temp : Unittest.ForeignMessage.ForeignMessage_Access;
    begin
      for E of From.Repeatedmessagefield loop
        Temp := new Unittest.ForeignMessage.Instance;
        Temp.Merge (Unittest.ForeignMessage.Instance (E.all));
        To.Repeatedmessagefield.Append (Protocol_Buffers.Message.Instance_Access (Temp));
      end loop;
    end;
    for E of From.Repeatedstringpiecefield loop
      To.Repeatedstringpiecefield.Append (new Protocol_Buffers.Wire_Format.PB_String'(E.all));
    end loop;
    for E of From.Repeatedcordfield loop
      To.Repeatedcordfield.Append (new Protocol_Buffers.Wire_Format.PB_String'(E.all));
    end loop;
    if (From.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      -- optional int32 PrimitiveField = 1;
      if From.Has_Primitivefield then
        To.Set_Primitivefield (From.Primitivefield);
      end if;
      -- optional string StringField = 2;
      if From.Has_Stringfield then
        To.Set_Stringfield(From.Get_Stringfield);
      end if;
      -- optional .protobuf_unittest.ForeignEnum EnumField = 3;
      if From.Has_Enumfield then
        To.Set_Enumfield (From.Enumfield);
      end if;
      -- optional .protobuf_unittest.ForeignMessage MessageField = 4;
      if From.Has_Messagefield then
        To.Get_Messagefield.Merge (From.Messagefield.all);
      end if;
      -- optional string StringPieceField = 5 [ctype = STRING_PIECE];
      if From.Has_Stringpiecefield then
        To.Set_Stringpiecefield(From.Get_Stringpiecefield);
      end if;
      -- optional string CordField = 6 [ctype = CORD];
      if From.Has_Cordfield then
        To.Set_Cordfield(From.Get_Cordfield);
      end if;
    end if;
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    if (The_Message.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      -- optional int32 PrimitiveField = 1;
      if The_Message.Has_Primitivefield then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (The_Message.Primitivefield);
      end if;
      -- optional string StringField = 2;
      if The_Message.Has_Stringfield then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (The_Message.Stringfield.all);
      end if;
      -- optional .protobuf_unittest.ForeignEnum EnumField = 3;
      if The_Message.Has_Enumfield then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Enumeration_To_PB_Int32(The_Message.Enumfield));
      end if;
      -- optional .protobuf_unittest.ForeignMessage MessageField = 4;
      if The_Message.Has_Messagefield then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Message_Size_No_Tag (The_Message.Messagefield.all);
      end if;
      -- optional string StringPieceField = 5 [ctype = STRING_PIECE];
      if The_Message.Has_Stringpiecefield then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (The_Message.Stringpiecefield.all);
      end if;
      -- optional string CordField = 6 [ctype = CORD];
      if The_Message.Has_Cordfield then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (The_Message.Cordfield.all);
      end if;
    end if;
    -- repeated int32 RepeatedPrimitiveField = 7;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Repeatedprimitivefield loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 1 * The_Message.Repeatedprimitivefield_Size + Data_Size;
    end;

    -- repeated string RepeatedStringField = 8;
    Total_Size := Total_Size + 1 * The_Message.Repeatedstringfield_Size;
    for E of The_Message.Repeatedstringfield loop
      Total_Size := Total_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (E.all);
    end loop;

    -- repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Repeatedenumfield loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 1 * The_Message.Repeatedenumfield_Size + Data_Size;
    end;

    -- repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
    Total_Size := Total_Size + 1 * The_Message.Repeatedmessagefield_Size;
    for E of The_Message.Repeatedmessagefield loop
      Total_Size := Total_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Message_Size_No_Tag (E.all);
    end loop;

    -- repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
    Total_Size := Total_Size + 1 * The_Message.Repeatedstringpiecefield_Size;
    for E of The_Message.Repeatedstringpiecefield loop
      Total_Size := Total_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (E.all);
    end loop;

    -- repeated string RepeatedCordField = 12 [ctype = CORD];
    Total_Size := Total_Size + 1 * The_Message.Repeatedcordfield_Size;
    for E of The_Message.Repeatedcordfield loop
      Total_Size := Total_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (E.all);
    end loop;

    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestCamelCaseFieldNames.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- optional int32 PrimitiveField = 1;
    if The_Message.Has_Primitivefield then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 1, The_Message.Primitivefield);
    end if;
    -- optional string StringField = 2;
    if The_Message.Has_Stringfield then
      The_Coded_Output_Stream.Write_String (2, The_Message.Stringfield.all);
    end if;
    -- optional .protobuf_unittest.ForeignEnum EnumField = 3;
    if The_Message.Has_Enumfield then
      Protocol_Buffers.IO.Coded_Output_Stream.Write_Integer_32 (The_Coded_Output_Stream, 3, Enumeration_To_PB_Int32(The_Message.Enumfield));
    end if;
    -- optional .protobuf_unittest.ForeignMessage MessageField = 4;
    if The_Message.Has_Messagefield then
      The_Coded_Output_Stream.Write_Message (4, The_Message.Messagefield.all);
    end if;
    -- optional string StringPieceField = 5 [ctype = STRING_PIECE];
    if The_Message.Has_Stringpiecefield then
      The_Coded_Output_Stream.Write_String (5, The_Message.Stringpiecefield.all);
    end if;
    -- optional string CordField = 6 [ctype = CORD];
    if The_Message.Has_Cordfield then
      The_Coded_Output_Stream.Write_String (6, The_Message.Cordfield.all);
    end if;
    -- repeated int32 RepeatedPrimitiveField = 7;
    for E of The_Message.Repeatedprimitivefield loop
      The_Coded_Output_Stream.Write_Integer_32 (7, E);
    end loop;
    -- repeated string RepeatedStringField = 8;
    for E of The_Message.Repeatedstringfield loop
      The_Coded_Output_Stream.Write_String (8, E.all);
    end loop;
    -- repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
    for E of The_Message.Repeatedenumfield loop
      The_Coded_Output_Stream.Write_Integer_32 (9, E);
    end loop;
    -- repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
    for E of The_Message.Repeatedmessagefield loop
      The_Coded_Output_Stream.Write_Message (10, E.all);
    end loop;
    -- repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
    for E of The_Message.Repeatedstringpiecefield loop
      The_Coded_Output_Stream.Write_String (11, E.all);
    end loop;
    -- repeated string RepeatedCordField = 12 [ctype = CORD];
    for E of The_Message.Repeatedcordfield loop
      The_Coded_Output_Stream.Write_String (12, E.all);
    end loop;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestCamelCaseFieldNames.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- optional int32 PrimitiveField = 1;
      when 1 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Primitivefield := The_Coded_Input_Stream.Read_Integer_32;
          The_Message.Set_Has_Primitivefield;
        end if;
      -- optional string StringField = 2;
      when 2 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
          begin
            if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
              Free (The_Message.Stringfield);
            end if;
          end;
          The_Message.Set_Has_Stringfield;
          The_Message.Stringfield := The_Coded_Input_Stream.Read_String;
        end if;
      -- optional .protobuf_unittest.ForeignEnum EnumField = 3;
      when 3 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Enumfield := PB_Int32_To_Enumeration(The_Coded_Input_Stream.Read_Integer_32);
          The_Message.Set_Has_Enumfield;
        end if;
      -- optional .protobuf_unittest.ForeignMessage MessageField = 4;
      when 4 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          The_Coded_Input_Stream.Read_Message (The_Message.Get_Messagefield.all);
        end if;
      -- optional string StringPieceField = 5 [ctype = STRING_PIECE];
      when 5 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
          begin
            if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
              Free (The_Message.Stringpiecefield);
            end if;
          end;
          The_Message.Set_Has_Stringpiecefield;
          The_Message.Stringpiecefield := The_Coded_Input_Stream.Read_String;
        end if;
      -- optional string CordField = 6 [ctype = CORD];
      when 6 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
          begin
            if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
              Free (The_Message.Cordfield);
            end if;
          end;
          The_Message.Set_Has_Cordfield;
          The_Message.Cordfield := The_Coded_Input_Stream.Read_String;
        end if;
      -- repeated int32 RepeatedPrimitiveField = 7;
      when 7 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Repeatedprimitivefield.Append (The_Coded_Input_Stream.Read_Integer_32);
        end if;
      -- repeated string RepeatedStringField = 8;
      when 8 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          The_Message.Repeatedstringfield.Append (The_Coded_Input_Stream.Read_String);
        end if;
      -- repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
      when 9 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Repeatedenumfield.Append (The_Coded_Input_Stream.Read_Enumeration);
        end if;
      -- repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
      when 10 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            Temp : Unittest.ForeignMessage.ForeignMessage_Access := The_Message.Add_Repeatedmessagefield;
          begin
            The_Coded_Input_Stream.Read_Message (Temp.all);
          end;
        end if;
      -- repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
      when 11 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          The_Message.Repeatedstringpiecefield.Append (The_Coded_Input_Stream.Read_String);
        end if;
      -- repeated string RepeatedCordField = 12 [ctype = CORD];
      when 12 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          The_Message.Repeatedcordfield.Append (The_Coded_Input_Stream.Read_String);
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.TestCamelCaseFieldNames.Instance) is
  begin
    declare
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Stringfield);
      end if;
    end;
    declare
      Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access(The_Message.Messagefield);
    begin
      Protocol_Buffers.Message.Free (Temp);
      The_Message.Messagefield := null;
    end;
    declare
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Stringpiecefield);
      end if;
    end;
    declare
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Cordfield);
      end if;
    end;
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedstringfield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedstringfield.Clear;

    for C in The_Message.Repeatedmessagefield.Iterate loop
      Protocol_Buffers.Message.Free (The_Message.Repeatedmessagefield.Reference (C).Element.all);
    end loop;
    The_Message.Repeatedmessagefield.Clear;

    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedstringpiecefield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedstringpiecefield.Clear;

    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedcordfield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedcordfield.Clear;

  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- optional int32 PrimitiveField = 1;
  function Has_Primitivefield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000001#) /= 0;
  end Has_Primitivefield;

  procedure Set_Has_Primitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000001#;
  end Set_Has_Primitivefield;

  procedure Clear_Has_Primitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000001#);
  end Clear_Has_Primitivefield;

  procedure Clear_Primitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Primitivefield := 0;
    The_Message.Clear_Has_Primitivefield;
  end Clear_Primitivefield;

  function Get_Primitivefield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Primitivefield;
  end Get_Primitivefield;

  procedure Set_Primitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Set_Has_Primitivefield;
    The_Message.Primitivefield := Value;
  end Set_Primitivefield;

  -- optional string StringField = 2;
  function Has_Stringfield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000002#) /= 0;
  end Has_Stringfield;

  procedure Set_Has_Stringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000002#;
  end Set_Has_Stringfield;

  procedure Clear_Has_Stringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000002#);
  end Clear_Has_Stringfield;

  procedure Clear_Stringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Clear_Has_Stringfield;
    declare
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Stringfield);
      end if;
    end;
    The_Message.Stringfield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    The_Message.Clear_Has_Stringfield;
  end Clear_Stringfield;

  function Get_Stringfield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Stringfield.all;
  end Get_Stringfield;

  function Get_Stringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access is
  begin
    The_Message.Set_Has_Stringfield;
    if Size >= 0 then
      declare
        procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
      begin
        if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Stringfield);
        end if;
      end;
      The_Message.Stringfield := new Protocol_Buffers.Wire_Format.PB_String'(1 .. Size => Character'Val (0));
      return The_Message.Stringfield;
    end if;

    if The_Message.Stringfield = Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
      The_Message.Stringfield := new String'(Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING);
    end if;
    return The_Message.Stringfield;
  end Get_Stringfield;

  procedure Set_Stringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Set_Has_Stringfield;
    if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access and then Value'Length = The_Message.Stringfield.all'Length then
      The_Message.Stringfield.all := Value;
    else
      declare
        procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
      begin
        if The_Message.Stringfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Stringfield);
        end if;
      end;
      The_Message.Stringfield := new Protocol_Buffers.Wire_Format.PB_String'(Value);
    end if;
  end Set_Stringfield;

  function Release_Stringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access is
  begin
    The_Message.Clear_Has_Stringfield;
    if The_Message.Stringfield = Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
      return null;
    else
      declare
        Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Stringfield;
      begin
        The_Message.Stringfield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
        return Temp;
      end;
    end if;
  end Release_Stringfield;

  -- optional .protobuf_unittest.ForeignEnum EnumField = 3;
  function Has_Enumfield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000004#) /= 0;
  end Has_Enumfield;

  procedure Set_Has_Enumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000004#;
  end Set_Has_Enumfield;

  procedure Clear_Has_Enumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000004#);
  end Clear_Has_Enumfield;

  procedure Clear_Enumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Enumfield := ForeignEnum'(FOREIGN_FOO);
    The_Message.Clear_Has_Enumfield;
  end Clear_Enumfield;

  function Get_Enumfield
    (The_Message : in TestCamelCaseFieldNames.Instance) return ForeignEnum is
  begin
    return The_Message.Enumfield;
  end Get_Enumfield;

  procedure Set_Enumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in ForeignEnum) is
  begin
    Set_Has_Enumfield (The_Message);
    The_Message.Enumfield := Value;
  end Set_Enumfield;

  -- optional .protobuf_unittest.ForeignMessage MessageField = 4;
  function Has_Messagefield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000008#) /= 0;
  end Has_Messagefield;

  procedure Set_Has_Messagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000008#;
  end Set_Has_Messagefield;

  procedure Clear_Has_Messagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000008#);
  end Clear_Has_Messagefield;

  procedure Clear_Messagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Clear_Has_Messagefield;
    declare
      Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access(The_Message.Messagefield);
    begin
      Protocol_Buffers.Message.Free (Temp);
      The_Message.Messagefield := null;
    end;
    The_Message.Clear_Has_Messagefield;
  end Clear_Messagefield;

  function Get_Messagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) return access Unittest.ForeignMessage.Instance is
    use type Unittest.ForeignMessage.ForeignMessage_Access;
  begin
    The_Message.Set_Has_Messagefield;
    if The_Message.Messagefield = null then
      The_Message.Messagefield := Unittest.ForeignMessage.ForeignMessage_Access'(new Unittest.ForeignMessage.Instance);
    end if;
    return The_Message.Messagefield;
  end Get_Messagefield;

  function Release_Messagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) return access Unittest.ForeignMessage.Instance is
    Temp : access Unittest.ForeignMessage.Instance;
  begin
    The_Message.Clear_Has_Messagefield;
    Temp := The_Message.Messagefield;
    The_Message.Messagefield := null;
    return Temp;
  end Release_Messagefield;

  procedure Set_Messagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Unittest.ForeignMessage.ForeignMessage_Access) is
    use type Unittest.ForeignMessage.ForeignMessage_Access;
    Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access (The_Message.Messagefield);
  begin
    Protocol_Buffers.Message.Free (Temp);
    The_Message.Messagefield := Value;
    if The_Message.Messagefield /= null then
      The_Message.Set_Has_Messagefield;
    else
      The_Message.Clear_Has_Messagefield;
    end if;
  end Set_Messagefield;

  -- optional string StringPieceField = 5 [ctype = STRING_PIECE];
  function Has_Stringpiecefield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000010#) /= 0;
  end Has_Stringpiecefield;

  procedure Set_Has_Stringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000010#;
  end Set_Has_Stringpiecefield;

  procedure Clear_Has_Stringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000010#);
  end Clear_Has_Stringpiecefield;

  procedure Clear_Stringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Clear_Has_Stringpiecefield;
    declare
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Stringpiecefield);
      end if;
    end;
    The_Message.Stringpiecefield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    The_Message.Clear_Has_Stringpiecefield;
  end Clear_Stringpiecefield;

  function Get_Stringpiecefield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Stringpiecefield.all;
  end Get_Stringpiecefield;

  function Get_Stringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access is
  begin
    The_Message.Set_Has_Stringpiecefield;
    if Size >= 0 then
      declare
        procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
      begin
        if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Stringpiecefield);
        end if;
      end;
      The_Message.Stringpiecefield := new Protocol_Buffers.Wire_Format.PB_String'(1 .. Size => Character'Val (0));
      return The_Message.Stringpiecefield;
    end if;

    if The_Message.Stringpiecefield = Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
      The_Message.Stringpiecefield := new String'(Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING);
    end if;
    return The_Message.Stringpiecefield;
  end Get_Stringpiecefield;

  procedure Set_Stringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Set_Has_Stringpiecefield;
    if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access and then Value'Length = The_Message.Stringpiecefield.all'Length then
      The_Message.Stringpiecefield.all := Value;
    else
      declare
        procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
      begin
        if The_Message.Stringpiecefield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Stringpiecefield);
        end if;
      end;
      The_Message.Stringpiecefield := new Protocol_Buffers.Wire_Format.PB_String'(Value);
    end if;
  end Set_Stringpiecefield;

  function Release_Stringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access is
  begin
    The_Message.Clear_Has_Stringpiecefield;
    if The_Message.Stringpiecefield = Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
      return null;
    else
      declare
        Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Stringpiecefield;
      begin
        The_Message.Stringpiecefield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
        return Temp;
      end;
    end if;
  end Release_Stringpiecefield;

  -- optional string CordField = 6 [ctype = CORD];
  function Has_Cordfield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000020#) /= 0;
  end Has_Cordfield;

  procedure Set_Has_Cordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000020#;
  end Set_Has_Cordfield;

  procedure Clear_Has_Cordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000020#);
  end Clear_Has_Cordfield;

  procedure Clear_Cordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Clear_Has_Cordfield;
    declare
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Cordfield);
      end if;
    end;
    The_Message.Cordfield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
    The_Message.Clear_Has_Cordfield;
  end Clear_Cordfield;

  function Get_Cordfield
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Cordfield.all;
  end Get_Cordfield;

  function Get_Cordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Size : in Integer := -1) return Protocol_Buffers.Wire_Format.PB_String_Access is
  begin
    The_Message.Set_Has_Cordfield;
    if Size >= 0 then
      declare
        procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
      begin
        if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Cordfield);
        end if;
      end;
      The_Message.Cordfield := new Protocol_Buffers.Wire_Format.PB_String'(1 .. Size => Character'Val (0));
      return The_Message.Cordfield;
    end if;

    if The_Message.Cordfield = Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
      The_Message.Cordfield := new String'(Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING);
    end if;
    return The_Message.Cordfield;
  end Get_Cordfield;

  procedure Set_Cordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Set_Has_Cordfield;
    if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access and then Value'Length = The_Message.Cordfield.all'Length then
      The_Message.Cordfield.all := Value;
    else
      declare
        procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
      begin
        if The_Message.Cordfield /= Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Cordfield);
        end if;
      end;
      The_Message.Cordfield := new Protocol_Buffers.Wire_Format.PB_String'(Value);
    end if;
  end Set_Cordfield;

  function Release_Cordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_String_Access is
  begin
    The_Message.Clear_Has_Cordfield;
    if The_Message.Cordfield = Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access then
      return null;
    else
      declare
        Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Cordfield;
      begin
        The_Message.Cordfield := Protocol_Buffers.Generated_Message_Utilities.EMPTY_STRING'Access;
        return Temp;
      end;
    end if;
  end Release_Cordfield;

  -- repeated int32 RepeatedPrimitiveField = 7;
  function Repeatedprimitivefield_Size
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeatedprimitivefield.Length);
  end Repeatedprimitivefield_Size;

  procedure Clear_Repeatedprimitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Repeatedprimitivefield.Clear;
  end Clear_Repeatedprimitivefield;

  function Get_Repeatedprimitivefield
    (The_Message : in TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Repeatedprimitivefield.Element (Index);
  end Get_Repeatedprimitivefield;

  procedure Set_Repeatedprimitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Repeatedprimitivefield.Replace_Element (Index, Value);
  end Set_Repeatedprimitivefield;

  procedure Add_Repeatedprimitivefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Repeatedprimitivefield.Append (Value);
  end Add_Repeatedprimitivefield;

  -- repeated string RepeatedStringField = 8;
  function Repeatedstringfield_Size
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeatedstringfield.Length);
  end Repeatedstringfield_Size;

  procedure Clear_Repeatedstringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedstringfield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedstringfield.Clear;

  end Clear_Repeatedstringfield;

  function Get_Repeatedstringfield
    (The_Message : in TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Repeatedstringfield.Element (Index).all;
  end Get_Repeatedstringfield;

  procedure Set_Repeatedstringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Repeatedstringfield.Element (Index);
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      Free (Temp);
    end;
    The_Message.Repeatedstringfield.Replace_Element (Index, new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Set_Repeatedstringfield;

  procedure Add_Repeatedstringfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Repeatedstringfield.Append (new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Add_Repeatedstringfield;

  -- repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
  function Repeatedenumfield_Size
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeatedenumfield.Length);
  end Repeatedenumfield_Size;

  procedure Clear_Repeatedenumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    The_Message.Repeatedenumfield.Clear;
  end Clear_Repeatedenumfield;

  function Get_Repeatedenumfield
    (The_Message : in TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return ForeignEnum is
  begin
    return PB_Int32_To_Enumeration(The_Message.Repeatedenumfield.Element (Index));
  end Get_Repeatedenumfield;

  procedure Set_Repeatedenumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in ForeignEnum) is
  begin
    The_Message.Repeatedenumfield.Replace_Element (Index, Enumeration_To_PB_Int32(Value));
  end Set_Repeatedenumfield;

  procedure Add_Repeatedenumfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in ForeignEnum) is
  begin
    The_Message.Repeatedenumfield.Append (Enumeration_To_PB_Int32 (Value));
  end Add_Repeatedenumfield;

  -- repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
  function Repeatedmessagefield_Size
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeatedmessagefield.Length);
  end Repeatedmessagefield_Size;

  procedure Clear_Repeatedmessagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    for C in The_Message.Repeatedmessagefield.Iterate loop
      Protocol_Buffers.Message.Free (The_Message.Repeatedmessagefield.Reference (C).Element.all);
    end loop;
    The_Message.Repeatedmessagefield.Clear;

  end Clear_Repeatedmessagefield;

  function Get_Repeatedmessagefield
    (The_Message : in TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return access Unittest.ForeignMessage.Instance is
  begin
    return Unittest.ForeignMessage.ForeignMessage_Access (The_Message.Repeatedmessagefield.Element (Index));
  end Get_Repeatedmessagefield;

  function Add_Repeatedmessagefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) return access Unittest.ForeignMessage.Instance is
    Temp : Unittest.ForeignMessage.ForeignMessage_Access := new Unittest.ForeignMessage.Instance;
  begin
    The_Message.Repeatedmessagefield.Append (Protocol_Buffers.Message.Instance_Access (Temp));
    return Temp;
  end Add_Repeatedmessagefield;

  -- repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
  function Repeatedstringpiecefield_Size
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeatedstringpiecefield.Length);
  end Repeatedstringpiecefield_Size;

  procedure Clear_Repeatedstringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedstringpiecefield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedstringpiecefield.Clear;

  end Clear_Repeatedstringpiecefield;

  function Get_Repeatedstringpiecefield
    (The_Message : in TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Repeatedstringpiecefield.Element (Index).all;
  end Get_Repeatedstringpiecefield;

  procedure Set_Repeatedstringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Repeatedstringpiecefield.Element (Index);
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      Free (Temp);
    end;
    The_Message.Repeatedstringpiecefield.Replace_Element (Index, new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Set_Repeatedstringpiecefield;

  procedure Add_Repeatedstringpiecefield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Repeatedstringpiecefield.Append (new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Add_Repeatedstringpiecefield;

  -- repeated string RepeatedCordField = 12 [ctype = CORD];
  function Repeatedcordfield_Size
    (The_Message : in TestCamelCaseFieldNames.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Repeatedcordfield.Length);
  end Repeatedcordfield_Size;

  procedure Clear_Repeatedcordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Repeatedcordfield loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Repeatedcordfield.Clear;

  end Clear_Repeatedcordfield;

  function Get_Repeatedcordfield
    (The_Message : in TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Repeatedcordfield.Element (Index).all;
  end Get_Repeatedcordfield;

  procedure Set_Repeatedcordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Repeatedcordfield.Element (Index);
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      Free (Temp);
    end;
    The_Message.Repeatedcordfield.Replace_Element (Index, new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Set_Repeatedcordfield;

  procedure Add_Repeatedcordfield
    (The_Message : in out TestCamelCaseFieldNames.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Repeatedcordfield.Append (new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Add_Repeatedcordfield;

end Unittest.TestCamelCaseFieldNames;
