-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package body Unittest.TestUnpackedTypes is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Int32.Clear;
    The_Message.Unpacked_Int64.Clear;
    The_Message.Unpacked_Uint32.Clear;
    The_Message.Unpacked_Uint64.Clear;
    The_Message.Unpacked_Sint32.Clear;
    The_Message.Unpacked_Sint64.Clear;
    The_Message.Unpacked_Fixed32.Clear;
    The_Message.Unpacked_Fixed64.Clear;
    The_Message.Unpacked_Sfixed32.Clear;
    The_Message.Unpacked_Sfixed64.Clear;
    The_Message.Unpacked_Float.Clear;
    The_Message.Unpacked_Double.Clear;
    The_Message.Unpacked_Bool.Clear;
    The_Message.Unpacked_Enum.Clear;
    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.TestUnpackedTypes.Instance;
     From : in Unittest.TestUnpackedTypes.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.TestUnpackedTypes";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.TestUnpackedTypes.Instance) return Boolean is
  begin
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.TestUnpackedTypes.Instance;
     From : in Unittest.TestUnpackedTypes.Instance) is
  begin
    To.Unpacked_Int32.Append(From.Unpacked_Int32);
    To.Unpacked_Int64.Append(From.Unpacked_Int64);
    To.Unpacked_Uint32.Append(From.Unpacked_Uint32);
    To.Unpacked_Uint64.Append(From.Unpacked_Uint64);
    To.Unpacked_Sint32.Append(From.Unpacked_Sint32);
    To.Unpacked_Sint64.Append(From.Unpacked_Sint64);
    To.Unpacked_Fixed32.Append(From.Unpacked_Fixed32);
    To.Unpacked_Fixed64.Append(From.Unpacked_Fixed64);
    To.Unpacked_Sfixed32.Append(From.Unpacked_Sfixed32);
    To.Unpacked_Sfixed64.Append(From.Unpacked_Sfixed64);
    To.Unpacked_Float.Append(From.Unpacked_Float);
    To.Unpacked_Double.Append(From.Unpacked_Double);
    To.Unpacked_Bool.Append(From.Unpacked_Bool);
    To.Unpacked_Enum.Append (From.Unpacked_Enum);
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    -- repeated int32 unpacked_int32 = 90 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Int32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Int32_Size + Data_Size;
    end;

    -- repeated int64 unpacked_int64 = 91 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Int64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_64_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Int64_Size + Data_Size;
    end;

    -- repeated uint32 unpacked_uint32 = 92 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Uint32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Unsigned_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Uint32_Size + Data_Size;
    end;

    -- repeated uint64 unpacked_uint64 = 93 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Uint64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Unsigned_Integer_64_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Uint64_Size + Data_Size;
    end;

    -- repeated sint32 unpacked_sint32 = 94 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Sint32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Signed_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Sint32_Size + Data_Size;
    end;

    -- repeated sint64 unpacked_sint64 = 95 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Sint64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Signed_Integer_64_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Sint64_Size + Data_Size;
    end;

    -- repeated fixed32 unpacked_fixed32 = 96 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Unpacked_Fixed32_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Fixed32_Size + Data_Size;
    end;

    -- repeated fixed64 unpacked_fixed64 = 97 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Unpacked_Fixed64_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Fixed64_Size + Data_Size;
    end;

    -- repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Unpacked_Sfixed32_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Sfixed32_Size + Data_Size;
    end;

    -- repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Unpacked_Sfixed64_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Sfixed64_Size + Data_Size;
    end;

    -- repeated float unpacked_float = 100 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Unpacked_Float_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Float_Size + Data_Size;
    end;

    -- repeated double unpacked_double = 101 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Unpacked_Double_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Double_Size + Data_Size;
    end;

    -- repeated bool unpacked_bool = 102 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 1 * The_Message.Unpacked_Bool_Size;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Bool_Size + Data_Size;
    end;

    -- repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Unpacked_Enum loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      Total_Size := Total_Size + 2 * The_Message.Unpacked_Enum_Size + Data_Size;
    end;

    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestUnpackedTypes.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- repeated int32 unpacked_int32 = 90 [packed = false];
    for E of The_Message.Unpacked_Int32 loop
      The_Coded_Output_Stream.Write_Integer_32 (90, E);
    end loop;
    -- repeated int64 unpacked_int64 = 91 [packed = false];
    for E of The_Message.Unpacked_Int64 loop
      The_Coded_Output_Stream.Write_Integer_64 (91, E);
    end loop;
    -- repeated uint32 unpacked_uint32 = 92 [packed = false];
    for E of The_Message.Unpacked_Uint32 loop
      The_Coded_Output_Stream.Write_Unsigned_Integer_32 (92, E);
    end loop;
    -- repeated uint64 unpacked_uint64 = 93 [packed = false];
    for E of The_Message.Unpacked_Uint64 loop
      The_Coded_Output_Stream.Write_Unsigned_Integer_64 (93, E);
    end loop;
    -- repeated sint32 unpacked_sint32 = 94 [packed = false];
    for E of The_Message.Unpacked_Sint32 loop
      The_Coded_Output_Stream.Write_Signed_Integer_32 (94, E);
    end loop;
    -- repeated sint64 unpacked_sint64 = 95 [packed = false];
    for E of The_Message.Unpacked_Sint64 loop
      The_Coded_Output_Stream.Write_Signed_Integer_64 (95, E);
    end loop;
    -- repeated fixed32 unpacked_fixed32 = 96 [packed = false];
    for E of The_Message.Unpacked_Fixed32 loop
      The_Coded_Output_Stream.Write_Fixed_32 (96, E);
    end loop;
    -- repeated fixed64 unpacked_fixed64 = 97 [packed = false];
    for E of The_Message.Unpacked_Fixed64 loop
      The_Coded_Output_Stream.Write_Fixed_64 (97, E);
    end loop;
    -- repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
    for E of The_Message.Unpacked_Sfixed32 loop
      The_Coded_Output_Stream.Write_Signed_Fixed_32 (98, E);
    end loop;
    -- repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
    for E of The_Message.Unpacked_Sfixed64 loop
      The_Coded_Output_Stream.Write_Signed_Fixed_64 (99, E);
    end loop;
    -- repeated float unpacked_float = 100 [packed = false];
    for E of The_Message.Unpacked_Float loop
      The_Coded_Output_Stream.Write_Float (100, E);
    end loop;
    -- repeated double unpacked_double = 101 [packed = false];
    for E of The_Message.Unpacked_Double loop
      The_Coded_Output_Stream.Write_Double (101, E);
    end loop;
    -- repeated bool unpacked_bool = 102 [packed = false];
    for E of The_Message.Unpacked_Bool loop
      The_Coded_Output_Stream.Write_Boolean (102, E);
    end loop;
    -- repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
    for E of The_Message.Unpacked_Enum loop
      The_Coded_Output_Stream.Write_Integer_32 (103, E);
    end loop;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestUnpackedTypes.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- repeated int32 unpacked_int32 = 90 [packed = false];
      when 90 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Int32.Append (The_Coded_Input_Stream.Read_Integer_32);
        end if;
      -- repeated int64 unpacked_int64 = 91 [packed = false];
      when 91 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Int64.Append (The_Coded_Input_Stream.Read_Integer_64);
        end if;
      -- repeated uint32 unpacked_uint32 = 92 [packed = false];
      when 92 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Uint32.Append (The_Coded_Input_Stream.Read_Unsigned_Integer_32);
        end if;
      -- repeated uint64 unpacked_uint64 = 93 [packed = false];
      when 93 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Uint64.Append (The_Coded_Input_Stream.Read_Unsigned_Integer_64);
        end if;
      -- repeated sint32 unpacked_sint32 = 94 [packed = false];
      when 94 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Sint32.Append (The_Coded_Input_Stream.Read_Signed_Integer_32);
        end if;
      -- repeated sint64 unpacked_sint64 = 95 [packed = false];
      when 95 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Sint64.Append (The_Coded_Input_Stream.Read_Signed_Integer_64);
        end if;
      -- repeated fixed32 unpacked_fixed32 = 96 [packed = false];
      when 96 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_32 then
          The_Message.Unpacked_Fixed32.Append (The_Coded_Input_Stream.Read_Fixed_32);
        end if;
      -- repeated fixed64 unpacked_fixed64 = 97 [packed = false];
      when 97 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_64 then
          The_Message.Unpacked_Fixed64.Append (The_Coded_Input_Stream.Read_Fixed_64);
        end if;
      -- repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
      when 98 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_32 then
          The_Message.Unpacked_Sfixed32.Append (The_Coded_Input_Stream.Read_Signed_Fixed_32);
        end if;
      -- repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
      when 99 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_64 then
          The_Message.Unpacked_Sfixed64.Append (The_Coded_Input_Stream.Read_Signed_Fixed_64);
        end if;
      -- repeated float unpacked_float = 100 [packed = false];
      when 100 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_32 then
          The_Message.Unpacked_Float.Append (The_Coded_Input_Stream.Read_Float);
        end if;
      -- repeated double unpacked_double = 101 [packed = false];
      when 101 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.FIXED_64 then
          The_Message.Unpacked_Double.Append (The_Coded_Input_Stream.Read_Double);
        end if;
      -- repeated bool unpacked_bool = 102 [packed = false];
      when 102 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Bool.Append (The_Coded_Input_Stream.Read_Boolean);
        end if;
      -- repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
      when 103 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.VARINT then
          The_Message.Unpacked_Enum.Append (The_Coded_Input_Stream.Read_Enumeration);
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.TestUnpackedTypes.Instance) is
  begin
    null;
  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- repeated int32 unpacked_int32 = 90 [packed = false];
  function Unpacked_Int32_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Int32.Length);
  end Unpacked_Int32_Size;

  procedure Clear_Unpacked_Int32
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Int32.Clear;
  end Clear_Unpacked_Int32;

  function Get_Unpacked_Int32
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Unpacked_Int32.Element (Index);
  end Get_Unpacked_Int32;

  procedure Set_Unpacked_Int32
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Unpacked_Int32.Replace_Element (Index, Value);
  end Set_Unpacked_Int32;

  procedure Add_Unpacked_Int32
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Unpacked_Int32.Append (Value);
  end Add_Unpacked_Int32;

  -- repeated int64 unpacked_int64 = 91 [packed = false];
  function Unpacked_Int64_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Int64.Length);
  end Unpacked_Int64_Size;

  procedure Clear_Unpacked_Int64
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Int64.Clear;
  end Clear_Unpacked_Int64;

  function Get_Unpacked_Int64
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Unpacked_Int64.Element (Index);
  end Get_Unpacked_Int64;

  procedure Set_Unpacked_Int64
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Unpacked_Int64.Replace_Element (Index, Value);
  end Set_Unpacked_Int64;

  procedure Add_Unpacked_Int64
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Unpacked_Int64.Append (Value);
  end Add_Unpacked_Int64;

  -- repeated uint32 unpacked_uint32 = 92 [packed = false];
  function Unpacked_Uint32_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Uint32.Length);
  end Unpacked_Uint32_Size;

  procedure Clear_Unpacked_Uint32
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Uint32.Clear;
  end Clear_Unpacked_Uint32;

  function Get_Unpacked_Uint32
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32 is
  begin
    return The_Message.Unpacked_Uint32.Element (Index);
  end Get_Unpacked_Uint32;

  procedure Set_Unpacked_Uint32
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Unpacked_Uint32.Replace_Element (Index, Value);
  end Set_Unpacked_Uint32;

  procedure Add_Unpacked_Uint32
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Unpacked_Uint32.Append (Value);
  end Add_Unpacked_Uint32;

  -- repeated uint64 unpacked_uint64 = 93 [packed = false];
  function Unpacked_Uint64_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Uint64.Length);
  end Unpacked_Uint64_Size;

  procedure Clear_Unpacked_Uint64
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Uint64.Clear;
  end Clear_Unpacked_Uint64;

  function Get_Unpacked_Uint64
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64 is
  begin
    return The_Message.Unpacked_Uint64.Element (Index);
  end Get_Unpacked_Uint64;

  procedure Set_Unpacked_Uint64
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Unpacked_Uint64.Replace_Element (Index, Value);
  end Set_Unpacked_Uint64;

  procedure Add_Unpacked_Uint64
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Unpacked_Uint64.Append (Value);
  end Add_Unpacked_Uint64;

  -- repeated sint32 unpacked_sint32 = 94 [packed = false];
  function Unpacked_Sint32_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Sint32.Length);
  end Unpacked_Sint32_Size;

  procedure Clear_Unpacked_Sint32
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Sint32.Clear;
  end Clear_Unpacked_Sint32;

  function Get_Unpacked_Sint32
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Unpacked_Sint32.Element (Index);
  end Get_Unpacked_Sint32;

  procedure Set_Unpacked_Sint32
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Unpacked_Sint32.Replace_Element (Index, Value);
  end Set_Unpacked_Sint32;

  procedure Add_Unpacked_Sint32
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Unpacked_Sint32.Append (Value);
  end Add_Unpacked_Sint32;

  -- repeated sint64 unpacked_sint64 = 95 [packed = false];
  function Unpacked_Sint64_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Sint64.Length);
  end Unpacked_Sint64_Size;

  procedure Clear_Unpacked_Sint64
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Sint64.Clear;
  end Clear_Unpacked_Sint64;

  function Get_Unpacked_Sint64
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Unpacked_Sint64.Element (Index);
  end Get_Unpacked_Sint64;

  procedure Set_Unpacked_Sint64
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Unpacked_Sint64.Replace_Element (Index, Value);
  end Set_Unpacked_Sint64;

  procedure Add_Unpacked_Sint64
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Unpacked_Sint64.Append (Value);
  end Add_Unpacked_Sint64;

  -- repeated fixed32 unpacked_fixed32 = 96 [packed = false];
  function Unpacked_Fixed32_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Fixed32.Length);
  end Unpacked_Fixed32_Size;

  procedure Clear_Unpacked_Fixed32
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Fixed32.Clear;
  end Clear_Unpacked_Fixed32;

  function Get_Unpacked_Fixed32
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32 is
  begin
    return The_Message.Unpacked_Fixed32.Element (Index);
  end Get_Unpacked_Fixed32;

  procedure Set_Unpacked_Fixed32
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Unpacked_Fixed32.Replace_Element (Index, Value);
  end Set_Unpacked_Fixed32;

  procedure Add_Unpacked_Fixed32
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Unpacked_Fixed32.Append (Value);
  end Add_Unpacked_Fixed32;

  -- repeated fixed64 unpacked_fixed64 = 97 [packed = false];
  function Unpacked_Fixed64_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Fixed64.Length);
  end Unpacked_Fixed64_Size;

  procedure Clear_Unpacked_Fixed64
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Fixed64.Clear;
  end Clear_Unpacked_Fixed64;

  function Get_Unpacked_Fixed64
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64 is
  begin
    return The_Message.Unpacked_Fixed64.Element (Index);
  end Get_Unpacked_Fixed64;

  procedure Set_Unpacked_Fixed64
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Unpacked_Fixed64.Replace_Element (Index, Value);
  end Set_Unpacked_Fixed64;

  procedure Add_Unpacked_Fixed64
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Unpacked_Fixed64.Append (Value);
  end Add_Unpacked_Fixed64;

  -- repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
  function Unpacked_Sfixed32_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Sfixed32.Length);
  end Unpacked_Sfixed32_Size;

  procedure Clear_Unpacked_Sfixed32
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Sfixed32.Clear;
  end Clear_Unpacked_Sfixed32;

  function Get_Unpacked_Sfixed32
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Unpacked_Sfixed32.Element (Index);
  end Get_Unpacked_Sfixed32;

  procedure Set_Unpacked_Sfixed32
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Unpacked_Sfixed32.Replace_Element (Index, Value);
  end Set_Unpacked_Sfixed32;

  procedure Add_Unpacked_Sfixed32
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Unpacked_Sfixed32.Append (Value);
  end Add_Unpacked_Sfixed32;

  -- repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
  function Unpacked_Sfixed64_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Sfixed64.Length);
  end Unpacked_Sfixed64_Size;

  procedure Clear_Unpacked_Sfixed64
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Sfixed64.Clear;
  end Clear_Unpacked_Sfixed64;

  function Get_Unpacked_Sfixed64
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Unpacked_Sfixed64.Element (Index);
  end Get_Unpacked_Sfixed64;

  procedure Set_Unpacked_Sfixed64
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Unpacked_Sfixed64.Replace_Element (Index, Value);
  end Set_Unpacked_Sfixed64;

  procedure Add_Unpacked_Sfixed64
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Unpacked_Sfixed64.Append (Value);
  end Add_Unpacked_Sfixed64;

  -- repeated float unpacked_float = 100 [packed = false];
  function Unpacked_Float_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Float.Length);
  end Unpacked_Float_Size;

  procedure Clear_Unpacked_Float
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Float.Clear;
  end Clear_Unpacked_Float;

  function Get_Unpacked_Float
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Float is
  begin
    return The_Message.Unpacked_Float.Element (Index);
  end Get_Unpacked_Float;

  procedure Set_Unpacked_Float
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Float) is
  begin
    The_Message.Unpacked_Float.Replace_Element (Index, Value);
  end Set_Unpacked_Float;

  procedure Add_Unpacked_Float
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Float) is
  begin
    The_Message.Unpacked_Float.Append (Value);
  end Add_Unpacked_Float;

  -- repeated double unpacked_double = 101 [packed = false];
  function Unpacked_Double_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Double.Length);
  end Unpacked_Double_Size;

  procedure Clear_Unpacked_Double
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Double.Clear;
  end Clear_Unpacked_Double;

  function Get_Unpacked_Double
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Double is
  begin
    return The_Message.Unpacked_Double.Element (Index);
  end Get_Unpacked_Double;

  procedure Set_Unpacked_Double
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Double) is
  begin
    The_Message.Unpacked_Double.Replace_Element (Index, Value);
  end Set_Unpacked_Double;

  procedure Add_Unpacked_Double
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Double) is
  begin
    The_Message.Unpacked_Double.Append (Value);
  end Add_Unpacked_Double;

  -- repeated bool unpacked_bool = 102 [packed = false];
  function Unpacked_Bool_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Bool.Length);
  end Unpacked_Bool_Size;

  procedure Clear_Unpacked_Bool
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Bool.Clear;
  end Clear_Unpacked_Bool;

  function Get_Unpacked_Bool
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Bool is
  begin
    return The_Message.Unpacked_Bool.Element (Index);
  end Get_Unpacked_Bool;

  procedure Set_Unpacked_Bool
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool) is
  begin
    The_Message.Unpacked_Bool.Replace_Element (Index, Value);
  end Set_Unpacked_Bool;

  procedure Add_Unpacked_Bool
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool) is
  begin
    The_Message.Unpacked_Bool.Append (Value);
  end Add_Unpacked_Bool;

  -- repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
  function Unpacked_Enum_Size
    (The_Message : in TestUnpackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Unpacked_Enum.Length);
  end Unpacked_Enum_Size;

  procedure Clear_Unpacked_Enum
    (The_Message : in out TestUnpackedTypes.Instance) is
  begin
    The_Message.Unpacked_Enum.Clear;
  end Clear_Unpacked_Enum;

  function Get_Unpacked_Enum
    (The_Message : in TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return ForeignEnum is
  begin
    return PB_Int32_To_Enumeration(The_Message.Unpacked_Enum.Element (Index));
  end Get_Unpacked_Enum;

  procedure Set_Unpacked_Enum
    (The_Message : in out TestUnpackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in ForeignEnum) is
  begin
    The_Message.Unpacked_Enum.Replace_Element (Index, Enumeration_To_PB_Int32(Value));
  end Set_Unpacked_Enum;

  procedure Add_Unpacked_Enum
    (The_Message : in out TestUnpackedTypes.Instance;
     Value : in ForeignEnum) is
  begin
    The_Message.Unpacked_Enum.Append (Enumeration_To_PB_Int32 (Value));
  end Add_Unpacked_Enum;

end Unittest.TestUnpackedTypes;
