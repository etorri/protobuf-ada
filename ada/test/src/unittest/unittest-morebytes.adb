-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package body Unittest.MoreBytes is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.MoreBytes.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Data loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Data.Clear;

    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.MoreBytes.Instance;
     From : in Unittest.MoreBytes.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.MoreBytes.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.MoreBytes";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.MoreBytes.Instance) return Boolean is
  begin
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.MoreBytes.Instance;
     From : in Unittest.MoreBytes.Instance) is
  begin
    for E of From.Data loop
      To.Data.Append (new Protocol_Buffers.Wire_Format.PB_String'(E.all));
    end loop;
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.MoreBytes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    -- repeated bytes data = 1;
    Total_Size := Total_Size + 1 * The_Message.Data_Size;
    for E of The_Message.Data loop
      Total_Size := Total_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (E.all);
    end loop;

    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.MoreBytes.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- repeated bytes data = 1;
    for E of The_Message.Data loop
      The_Coded_Output_Stream.Write_String (1, E.all);
    end loop;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.MoreBytes.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- repeated bytes data = 1;
      when 1 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          The_Message.Data.Append (The_Coded_Input_Stream.Read_String);
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.MoreBytes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.MoreBytes.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Data loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Data.Clear;

  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- repeated bytes data = 1;
  function Data_Size
    (The_Message : in MoreBytes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Data.Length);
  end Data_Size;

  procedure Clear_Data
    (The_Message : in out MoreBytes.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access;
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      for E of The_Message.Data loop
        Temp := E;
        Free (Temp);
      end loop;
    end;
    The_Message.Data.Clear;

  end Clear_Data;

  function Get_Data
    (The_Message : in MoreBytes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return The_Message.Data.Element (Index).all;
  end Get_Data;

  procedure Set_Data
    (The_Message : in out MoreBytes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    declare
      Temp : Protocol_Buffers.Wire_Format.PB_String_Access := The_Message.Data.Element (Index);
      procedure Free is new Ada.Unchecked_Deallocation (Protocol_Buffers.Wire_Format.PB_String, Protocol_Buffers.Wire_Format.PB_String_Access);
    begin
      Free (Temp);
    end;
    The_Message.Data.Replace_Element (Index, new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Set_Data;

  procedure Add_Data
    (The_Message : in out MoreBytes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_String) is
  begin
    The_Message.Data.Append (new Protocol_Buffers.Wire_Format.PB_String'(Value));
  end Add_Data;

end Unittest.MoreBytes;
