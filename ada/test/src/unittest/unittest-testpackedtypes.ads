-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package Unittest.TestPackedTypes is
  type Instance is new Protocol_Buffers.Message.Instance with private;
  type TestPackedTypes_Access is access all Instance;

  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  overriding
  procedure Clear
    (The_Message : in out Unittest.TestPackedTypes.Instance);

  overriding
  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestPackedTypes.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance);

  overriding
  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestPackedTypes.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance);

  overriding
  procedure Merge
    (To   : in out Unittest.TestPackedTypes.Instance;
     From : in Unittest.TestPackedTypes.Instance);

  overriding
  procedure Copy
    (To   : in out Unittest.TestPackedTypes.Instance;
     From : in Unittest.TestPackedTypes.Instance);

  overriding
  function Get_Type_Name
    (The_Message : in Unittest.TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String;

  overriding
  function Byte_Size
    (The_Message : in out Unittest.TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;

  overriding
  function Get_Cached_Size
    (The_Message : in Unittest.TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;

  overriding
  function Is_Initialized
    (The_Message : in Unittest.TestPackedTypes.Instance) return Boolean;

  overriding
  procedure Finalize (The_Message : in out Unittest.TestPackedTypes.Instance);

  ---------------------------------------------------------------------------
  -- Field accessor declarations --------------------------------------------
  ---------------------------------------------------------------------------

  -- repeated int32 packed_int32 = 90 [packed = true];
  function Packed_Int32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Int32
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Int32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Packed_Int32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);
  procedure Add_Packed_Int32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- repeated int64 packed_int64 = 91 [packed = true];
  function Packed_Int64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Int64
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Int64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Packed_Int64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);
  procedure Add_Packed_Int64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- repeated uint32 packed_uint32 = 92 [packed = true];
  function Packed_Uint32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Uint32
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Uint32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Packed_Uint32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);
  procedure Add_Packed_Uint32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- repeated uint64 packed_uint64 = 93 [packed = true];
  function Packed_Uint64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Uint64
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Uint64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Packed_Uint64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);
  procedure Add_Packed_Uint64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- repeated sint32 packed_sint32 = 94 [packed = true];
  function Packed_Sint32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Sint32
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Sint32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Packed_Sint32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);
  procedure Add_Packed_Sint32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- repeated sint64 packed_sint64 = 95 [packed = true];
  function Packed_Sint64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Sint64
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Sint64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Packed_Sint64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);
  procedure Add_Packed_Sint64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- repeated fixed32 packed_fixed32 = 96 [packed = true];
  function Packed_Fixed32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Fixed32
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Fixed32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32;
  procedure Set_Packed_Fixed32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);
  procedure Add_Packed_Fixed32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32);

  -- repeated fixed64 packed_fixed64 = 97 [packed = true];
  function Packed_Fixed64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Fixed64
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Fixed64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64;
  procedure Set_Packed_Fixed64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);
  procedure Add_Packed_Fixed64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64);

  -- repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  function Packed_Sfixed32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Sfixed32
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Sfixed32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32;
  procedure Set_Packed_Sfixed32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);
  procedure Add_Packed_Sfixed32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32);

  -- repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  function Packed_Sfixed64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Sfixed64
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Sfixed64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64;
  procedure Set_Packed_Sfixed64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);
  procedure Add_Packed_Sfixed64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64);

  -- repeated float packed_float = 100 [packed = true];
  function Packed_Float_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Float
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Float
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Float;
  procedure Set_Packed_Float
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Float);
  procedure Add_Packed_Float
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Float);

  -- repeated double packed_double = 101 [packed = true];
  function Packed_Double_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Double
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Double
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Double;
  procedure Set_Packed_Double
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Double);
  procedure Add_Packed_Double
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Double);

  -- repeated bool packed_bool = 102 [packed = true];
  function Packed_Bool_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Bool
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Bool
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Bool;
  procedure Set_Packed_Bool
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool);
  procedure Add_Packed_Bool
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool);

  -- repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  function Packed_Enum_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size;
  procedure Clear_Packed_Enum
    (The_Message : in out TestPackedTypes.Instance);
  function Get_Packed_Enum
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return ForeignEnum;
  procedure Set_Packed_Enum
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in ForeignEnum);
  procedure Add_Packed_Enum
    (The_Message : in out TestPackedTypes.Instance;
     Value : in ForeignEnum);

private
  type Instance is new Protocol_Buffers.Message.Instance with record
    Packed_Int32 : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Packed_Int32_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Int64 : Protocol_Buffers.Wire_Format.PB_Int64_Vector.Vector;
    Packed_Int64_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Uint32 : Protocol_Buffers.Wire_Format.PB_UInt32_Vector.Vector;
    Packed_Uint32_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Uint64 : Protocol_Buffers.Wire_Format.PB_UInt64_Vector.Vector;
    Packed_Uint64_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Sint32 : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Packed_Sint32_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Sint64 : Protocol_Buffers.Wire_Format.PB_Int64_Vector.Vector;
    Packed_Sint64_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Fixed32 : Protocol_Buffers.Wire_Format.PB_UInt32_Vector.Vector;
    Packed_Fixed32_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Fixed64 : Protocol_Buffers.Wire_Format.PB_UInt64_Vector.Vector;
    Packed_Fixed64_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Sfixed32 : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Packed_Sfixed32_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Sfixed64 : Protocol_Buffers.Wire_Format.PB_Int64_Vector.Vector;
    Packed_Sfixed64_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Float : Protocol_Buffers.Wire_Format.PB_Float_Vector.Vector;
    Packed_Float_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Double : Protocol_Buffers.Wire_Format.PB_Double_Vector.Vector;
    Packed_Double_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Bool : Protocol_Buffers.Wire_Format.PB_Bool_Vector.Vector;
    Packed_Bool_Cached_Byte_Size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Packed_Enum : Protocol_Buffers.Wire_Format.PB_Int32_Vector.Vector;
    Packed_Enum_cached_byte_size : Protocol_Buffers.Wire_Format.PB_Object_Size;
    Has_Bits : Protocol_Buffers.Wire_Format.Has_Bits_Array_Type (0 .. (14 + 31) / 32) := (others => 0);
    Cached_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  end record;

end Unittest.TestPackedTypes;
