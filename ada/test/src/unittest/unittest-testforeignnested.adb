-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

with Unittest.TestAllTypes.NestedMessage;

package body Unittest.TestForeignNested is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.TestForeignNested.Instance) is
  begin
    if (The_Message.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      if The_Message.Has_Foreign_Nested then
        The_Message.Clear_Has_Foreign_Nested;
        declare
          Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access(The_Message.Foreign_Nested);
        begin
          Protocol_Buffers.Message.Free (Temp);
          The_Message.Foreign_Nested := null;
        end;
      end if;
    end if;
    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.TestForeignNested.Instance;
     From : in Unittest.TestForeignNested.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.TestForeignNested.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.TestForeignNested";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.TestForeignNested.Instance) return Boolean is
  begin
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.TestForeignNested.Instance;
     From : in Unittest.TestForeignNested.Instance) is
  begin
    if (From.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      -- optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
      if From.Has_Foreign_Nested then
        To.Get_Foreign_Nested.Merge (From.Foreign_Nested.all);
      end if;
    end if;
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.TestForeignNested.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    if (The_Message.Has_Bits (0 / 32) and Protocol_Buffers.Wire_Format.Shift_Left (16#FF#, 0 mod 32)) /= 0 then
      -- optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
      if The_Message.Has_Foreign_Nested then
        Total_Size := Total_Size + 1 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Message_Size_No_Tag (The_Message.Foreign_Nested.all);
      end if;
    end if;
    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestForeignNested.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
    if The_Message.Has_Foreign_Nested then
      The_Coded_Output_Stream.Write_Message (1, The_Message.Foreign_Nested.all);
    end if;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestForeignNested.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
      when 1 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          The_Coded_Input_Stream.Read_Message (The_Message.Get_Foreign_Nested.all);
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.TestForeignNested.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.TestForeignNested.Instance) is
  begin
    declare
      Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access(The_Message.Foreign_Nested);
    begin
      Protocol_Buffers.Message.Free (Temp);
      The_Message.Foreign_Nested := null;
    end;
  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
  function Has_Foreign_Nested
    (The_Message : in TestForeignNested.Instance) return Boolean is
  begin
    return (The_Message.Has_Bits(0) and 16#00000001#) /= 0;
  end Has_Foreign_Nested;

  procedure Set_Has_Foreign_Nested
    (The_Message : in out TestForeignNested.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000001#;
  end Set_Has_Foreign_Nested;

  procedure Clear_Has_Foreign_Nested
    (The_Message : in out TestForeignNested.Instance) is
  begin
    The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000001#);
  end Clear_Has_Foreign_Nested;

  procedure Clear_Foreign_Nested
    (The_Message : in out TestForeignNested.Instance) is
  begin
    The_Message.Clear_Has_Foreign_Nested;
    declare
      Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access(The_Message.Foreign_Nested);
    begin
      Protocol_Buffers.Message.Free (Temp);
      The_Message.Foreign_Nested := null;
    end;
    The_Message.Clear_Has_Foreign_Nested;
  end Clear_Foreign_Nested;

  function Get_Foreign_Nested
    (The_Message : in out TestForeignNested.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance is
    use type Unittest.TestAllTypes.NestedMessage.NestedMessage_Access;
  begin
    The_Message.Set_Has_Foreign_Nested;
    if The_Message.Foreign_Nested = null then
      The_Message.Foreign_Nested := Unittest.TestAllTypes.NestedMessage.NestedMessage_Access'(new Unittest.TestAllTypes.NestedMessage.Instance);
    end if;
    return The_Message.Foreign_Nested;
  end Get_Foreign_Nested;

  function Release_Foreign_Nested
    (The_Message : in out TestForeignNested.Instance) return access Unittest.TestAllTypes.NestedMessage.Instance is
    Temp : access Unittest.TestAllTypes.NestedMessage.Instance;
  begin
    The_Message.Clear_Has_Foreign_Nested;
    Temp := The_Message.Foreign_Nested;
    The_Message.Foreign_Nested := null;
    return Temp;
  end Release_Foreign_Nested;

  procedure Set_Foreign_Nested
    (The_Message : in out TestForeignNested.Instance;
     Value : in Unittest.TestAllTypes.NestedMessage.NestedMessage_Access) is
    use type Unittest.TestAllTypes.NestedMessage.NestedMessage_Access;
    Temp : Protocol_Buffers.Message.Instance_Access := Protocol_Buffers.Message.Instance_Access (The_Message.Foreign_Nested);
  begin
    Protocol_Buffers.Message.Free (Temp);
    The_Message.Foreign_Nested := Value;
    if The_Message.Foreign_Nested /= null then
      The_Message.Set_Has_Foreign_Nested;
    else
      The_Message.Clear_Has_Foreign_Nested;
    end if;
  end Set_Foreign_Nested;

end Unittest.TestForeignNested;
