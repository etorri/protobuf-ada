-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: unittest.proto

pragma Ada_2012;

package body Unittest.TestPackedTypes is
  ---------------------------------------------------------------------------
  -- Inherited functions and procedures from Protocol_Buffers.Message -------
  ---------------------------------------------------------------------------

  procedure Clear
    (The_Message : in out Unittest.TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Int32.Clear;
    The_Message.Packed_Int64.Clear;
    The_Message.Packed_Uint32.Clear;
    The_Message.Packed_Uint64.Clear;
    The_Message.Packed_Sint32.Clear;
    The_Message.Packed_Sint64.Clear;
    The_Message.Packed_Fixed32.Clear;
    The_Message.Packed_Fixed64.Clear;
    The_Message.Packed_Sfixed32.Clear;
    The_Message.Packed_Sfixed64.Clear;
    The_Message.Packed_Float.Clear;
    The_Message.Packed_Double.Clear;
    The_Message.Packed_Bool.Clear;
    The_Message.Packed_Enum.Clear;
    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy
    (To   : in out Unittest.TestPackedTypes.Instance;
     From : in Unittest.TestPackedTypes.Instance) is
  begin
    To.Clear;
    To.Merge (From);
  end Copy;

  function Get_Type_Name
    (The_Message : in Unittest.TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_String is
  begin
    return "protobuf_unittest.TestPackedTypes";
  end Get_Type_Name;

  function Is_Initialized
    (The_Message : in Unittest.TestPackedTypes.Instance) return Boolean is
  begin
    return True;
  end Is_Initialized;

  procedure Merge
    (To   : in out Unittest.TestPackedTypes.Instance;
     From : in Unittest.TestPackedTypes.Instance) is
  begin
    To.Packed_Int32.Append(From.Packed_Int32);
    To.Packed_Int64.Append(From.Packed_Int64);
    To.Packed_Uint32.Append(From.Packed_Uint32);
    To.Packed_Uint64.Append(From.Packed_Uint64);
    To.Packed_Sint32.Append(From.Packed_Sint32);
    To.Packed_Sint64.Append(From.Packed_Sint64);
    To.Packed_Fixed32.Append(From.Packed_Fixed32);
    To.Packed_Fixed64.Append(From.Packed_Fixed64);
    To.Packed_Sfixed32.Append(From.Packed_Sfixed32);
    To.Packed_Sfixed64.Append(From.Packed_Sfixed64);
    To.Packed_Float.Append(From.Packed_Float);
    To.Packed_Double.Append(From.Packed_Double);
    To.Packed_Bool.Append(From.Packed_Bool);
    To.Packed_Enum.Append (From.Packed_Enum);
  end Merge;

  function Byte_Size
    (The_Message : in out Unittest.TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
    Total_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
  begin
    -- repeated int32 packed_int32 = 90 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Int32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Int32_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated int64 packed_int64 = 91 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Int64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_64_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Int64_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated uint32 packed_uint32 = 92 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Uint32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Unsigned_Integer_32_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Uint32_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated uint64 packed_uint64 = 93 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Uint64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Unsigned_Integer_64_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Uint64_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated sint32 packed_sint32 = 94 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Sint32 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Signed_Integer_32_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Sint32_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated sint64 packed_sint64 = 95 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Sint64 loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Signed_Integer_64_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Sint64_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated fixed32 packed_fixed32 = 96 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Packed_Fixed32_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Fixed32_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated fixed64 packed_fixed64 = 97 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Packed_Fixed64_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Fixed64_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated sfixed32 packed_sfixed32 = 98 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Packed_Sfixed32_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Sfixed32_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated sfixed64 packed_sfixed64 = 99 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Packed_Sfixed64_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Sfixed64_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated float packed_float = 100 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 4 * The_Message.Packed_Float_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Float_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated double packed_double = 101 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 8 * The_Message.Packed_Double_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Double_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated bool packed_bool = 102 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      Data_Size := 1 * The_Message.Packed_Bool_Size;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Bool_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    -- repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
    declare
      Data_Size : Protocol_Buffers.Wire_Format.PB_Object_Size := 0;
    begin
      for E of The_Message.Packed_Enum loop
        Data_Size := Data_Size + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (E);
      end loop;
      if Data_Size > 0 then
        Total_Size := Total_Size + 2 + Protocol_Buffers.IO.Coded_Output_Stream.Compute_Integer_32_Size_No_Tag (Protocol_Buffers.Wire_Format.PB_Int32 (Data_Size));
      end if;
      The_Message.Packed_Enum_Cached_Byte_Size := Data_Size;
      Total_Size := Total_Size + Data_Size;
    end;

    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
    (The_Message   : in Unittest.TestPackedTypes.Instance;
     The_Coded_Output_Stream : in
       Protocol_Buffers.IO.Coded_Output_Stream.Instance) is
  begin
    -- repeated int32 packed_int32 = 90 [packed = true];
    if The_Message.Packed_Int32_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (90,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Int32_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Int32 loop
      The_Coded_Output_Stream.Write_Integer_32_No_Tag (E);
    end loop;
    -- repeated int64 packed_int64 = 91 [packed = true];
    if The_Message.Packed_Int64_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (91,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Int64_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Int64 loop
      The_Coded_Output_Stream.Write_Integer_64_No_Tag (E);
    end loop;
    -- repeated uint32 packed_uint32 = 92 [packed = true];
    if The_Message.Packed_Uint32_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (92,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Uint32_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Uint32 loop
      The_Coded_Output_Stream.Write_Unsigned_Integer_32_No_Tag (E);
    end loop;
    -- repeated uint64 packed_uint64 = 93 [packed = true];
    if The_Message.Packed_Uint64_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (93,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Uint64_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Uint64 loop
      The_Coded_Output_Stream.Write_Unsigned_Integer_64_No_Tag (E);
    end loop;
    -- repeated sint32 packed_sint32 = 94 [packed = true];
    if The_Message.Packed_Sint32_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (94,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Sint32_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Sint32 loop
      The_Coded_Output_Stream.Write_Signed_Integer_32_No_Tag (E);
    end loop;
    -- repeated sint64 packed_sint64 = 95 [packed = true];
    if The_Message.Packed_Sint64_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (95,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Sint64_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Sint64 loop
      The_Coded_Output_Stream.Write_Signed_Integer_64_No_Tag (E);
    end loop;
    -- repeated fixed32 packed_fixed32 = 96 [packed = true];
    if The_Message.Packed_Fixed32_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (96,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Fixed32_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Fixed32 loop
      The_Coded_Output_Stream.Write_Fixed_32_No_Tag (E);
    end loop;
    -- repeated fixed64 packed_fixed64 = 97 [packed = true];
    if The_Message.Packed_Fixed64_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (97,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Fixed64_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Fixed64 loop
      The_Coded_Output_Stream.Write_Fixed_64_No_Tag (E);
    end loop;
    -- repeated sfixed32 packed_sfixed32 = 98 [packed = true];
    if The_Message.Packed_Sfixed32_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (98,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Sfixed32_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Sfixed32 loop
      The_Coded_Output_Stream.Write_Signed_Fixed_32_No_Tag (E);
    end loop;
    -- repeated sfixed64 packed_sfixed64 = 99 [packed = true];
    if The_Message.Packed_Sfixed64_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (99,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Sfixed64_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Sfixed64 loop
      The_Coded_Output_Stream.Write_Signed_Fixed_64_No_Tag (E);
    end loop;
    -- repeated float packed_float = 100 [packed = true];
    if The_Message.Packed_Float_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (100,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Float_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Float loop
      The_Coded_Output_Stream.Write_Float_No_Tag (E);
    end loop;
    -- repeated double packed_double = 101 [packed = true];
    if The_Message.Packed_Double_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (101,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Double_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Double loop
      The_Coded_Output_Stream.Write_Double_No_Tag (E);
    end loop;
    -- repeated bool packed_bool = 102 [packed = true];
    if The_Message.Packed_Bool_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (102,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Bool_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Bool loop
      The_Coded_Output_Stream.Write_Boolean_No_Tag (E);
    end loop;
    -- repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
    if The_Message.Packed_Enum_Size > 0 then
      The_Coded_Output_Stream.Write_Tag (103,Protocol_Buffers.Wire_Format.LENGTH_DELIMITED);
      The_Coded_Output_Stream.Write_Raw_Varint_32 (Protocol_Buffers.Wire_Format.PB_UInt32(The_Message.Packed_Enum_Cached_Byte_Size));
    end if;
    for E of The_Message.Packed_Enum loop
      The_Coded_Output_Stream.Write_Integer_32_No_Tag (E);
    end loop;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
    (The_Message   : in out Unittest.TestPackedTypes.Instance;
     The_Coded_Input_Stream : in out
       Protocol_Buffers.IO.Coded_Input_Stream.Instance) is
    Tag : Protocol_Buffers.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Protocol_Buffers.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- repeated int32 packed_int32 = 90 [packed = true];
      when 90 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Int32.append (The_Coded_Input_Stream.Read_Integer_32);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated int64 packed_int64 = 91 [packed = true];
      when 91 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Int64.append (The_Coded_Input_Stream.Read_Integer_64);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated uint32 packed_uint32 = 92 [packed = true];
      when 92 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Uint32.append (The_Coded_Input_Stream.Read_Unsigned_Integer_32);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated uint64 packed_uint64 = 93 [packed = true];
      when 93 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Uint64.append (The_Coded_Input_Stream.Read_Unsigned_Integer_64);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated sint32 packed_sint32 = 94 [packed = true];
      when 94 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Sint32.append (The_Coded_Input_Stream.Read_Signed_Integer_32);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated sint64 packed_sint64 = 95 [packed = true];
      when 95 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Sint64.append (The_Coded_Input_Stream.Read_Signed_Integer_64);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated fixed32 packed_fixed32 = 96 [packed = true];
      when 96 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Fixed32.append (The_Coded_Input_Stream.Read_Fixed_32);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated fixed64 packed_fixed64 = 97 [packed = true];
      when 97 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Fixed64.append (The_Coded_Input_Stream.Read_Fixed_64);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated sfixed32 packed_sfixed32 = 98 [packed = true];
      when 98 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Sfixed32.append (The_Coded_Input_Stream.Read_Signed_Fixed_32);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated sfixed64 packed_sfixed64 = 99 [packed = true];
      when 99 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Sfixed64.append (The_Coded_Input_Stream.Read_Signed_Fixed_64);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated float packed_float = 100 [packed = true];
      when 100 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Float.append (The_Coded_Input_Stream.Read_Float);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated double packed_double = 101 [packed = true];
      when 101 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Double.append (The_Coded_Input_Stream.Read_Double);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated bool packed_bool = 102 [packed = true];
      when 102 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset(Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Bool.append (The_Coded_Input_Stream.Read_Boolean);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      -- repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
      when 103 =>
        if Protocol_Buffers.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Protocol_Buffers.Wire_Format.LENGTH_DELIMITED then
          declare
            use type Ada.Streams.Stream_Element_Offset;
            Length : Protocol_Buffers.Wire_Format.PB_UInt32 := The_Coded_Input_Stream.Read_Raw_Varint_32;
            Limit : Ada.Streams.Stream_Element_Offset := The_Coded_Input_Stream.Push_Limit (Ada.Streams.Stream_Element_Offset (Length));
          begin
            while The_Coded_Input_Stream.Get_Bytes_Until_Limit > 0 loop
              The_Message.Packed_Enum.append (The_Coded_Input_Stream.Read_Enumeration);
            end loop;
          The_Coded_Input_Stream.Pop_Limit (Limit);
          end;
        end if;
      when others =>
        declare
          Dummy : Protocol_Buffers.Wire_Format.PB_Bool;
          pragma Unreferenced (Dummy);
        begin
          Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
          return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
    (The_Message : in Unittest.TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize
    (The_Message : in out Unittest.TestPackedTypes.Instance) is
  begin
    null;
  end Finalize;

  ---------------------------------------------------------------------------
  -- Field accessor definitions ---------------------------------------------
  ---------------------------------------------------------------------------

  -- repeated int32 packed_int32 = 90 [packed = true];
  function Packed_Int32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Int32.Length);
  end Packed_Int32_Size;

  procedure Clear_Packed_Int32
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Int32.Clear;
  end Clear_Packed_Int32;

  function Get_Packed_Int32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Packed_Int32.Element (Index);
  end Get_Packed_Int32;

  procedure Set_Packed_Int32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Packed_Int32.Replace_Element (Index, Value);
  end Set_Packed_Int32;

  procedure Add_Packed_Int32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Packed_Int32.Append (Value);
  end Add_Packed_Int32;

  -- repeated int64 packed_int64 = 91 [packed = true];
  function Packed_Int64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Int64.Length);
  end Packed_Int64_Size;

  procedure Clear_Packed_Int64
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Int64.Clear;
  end Clear_Packed_Int64;

  function Get_Packed_Int64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Packed_Int64.Element (Index);
  end Get_Packed_Int64;

  procedure Set_Packed_Int64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Packed_Int64.Replace_Element (Index, Value);
  end Set_Packed_Int64;

  procedure Add_Packed_Int64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Packed_Int64.Append (Value);
  end Add_Packed_Int64;

  -- repeated uint32 packed_uint32 = 92 [packed = true];
  function Packed_Uint32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Uint32.Length);
  end Packed_Uint32_Size;

  procedure Clear_Packed_Uint32
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Uint32.Clear;
  end Clear_Packed_Uint32;

  function Get_Packed_Uint32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32 is
  begin
    return The_Message.Packed_Uint32.Element (Index);
  end Get_Packed_Uint32;

  procedure Set_Packed_Uint32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Packed_Uint32.Replace_Element (Index, Value);
  end Set_Packed_Uint32;

  procedure Add_Packed_Uint32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Packed_Uint32.Append (Value);
  end Add_Packed_Uint32;

  -- repeated uint64 packed_uint64 = 93 [packed = true];
  function Packed_Uint64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Uint64.Length);
  end Packed_Uint64_Size;

  procedure Clear_Packed_Uint64
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Uint64.Clear;
  end Clear_Packed_Uint64;

  function Get_Packed_Uint64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64 is
  begin
    return The_Message.Packed_Uint64.Element (Index);
  end Get_Packed_Uint64;

  procedure Set_Packed_Uint64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Packed_Uint64.Replace_Element (Index, Value);
  end Set_Packed_Uint64;

  procedure Add_Packed_Uint64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Packed_Uint64.Append (Value);
  end Add_Packed_Uint64;

  -- repeated sint32 packed_sint32 = 94 [packed = true];
  function Packed_Sint32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Sint32.Length);
  end Packed_Sint32_Size;

  procedure Clear_Packed_Sint32
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Sint32.Clear;
  end Clear_Packed_Sint32;

  function Get_Packed_Sint32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Packed_Sint32.Element (Index);
  end Get_Packed_Sint32;

  procedure Set_Packed_Sint32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Packed_Sint32.Replace_Element (Index, Value);
  end Set_Packed_Sint32;

  procedure Add_Packed_Sint32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Packed_Sint32.Append (Value);
  end Add_Packed_Sint32;

  -- repeated sint64 packed_sint64 = 95 [packed = true];
  function Packed_Sint64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Sint64.Length);
  end Packed_Sint64_Size;

  procedure Clear_Packed_Sint64
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Sint64.Clear;
  end Clear_Packed_Sint64;

  function Get_Packed_Sint64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Packed_Sint64.Element (Index);
  end Get_Packed_Sint64;

  procedure Set_Packed_Sint64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Packed_Sint64.Replace_Element (Index, Value);
  end Set_Packed_Sint64;

  procedure Add_Packed_Sint64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Packed_Sint64.Append (Value);
  end Add_Packed_Sint64;

  -- repeated fixed32 packed_fixed32 = 96 [packed = true];
  function Packed_Fixed32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Fixed32.Length);
  end Packed_Fixed32_Size;

  procedure Clear_Packed_Fixed32
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Fixed32.Clear;
  end Clear_Packed_Fixed32;

  function Get_Packed_Fixed32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt32 is
  begin
    return The_Message.Packed_Fixed32.Element (Index);
  end Get_Packed_Fixed32;

  procedure Set_Packed_Fixed32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Packed_Fixed32.Replace_Element (Index, Value);
  end Set_Packed_Fixed32;

  procedure Add_Packed_Fixed32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt32) is
  begin
    The_Message.Packed_Fixed32.Append (Value);
  end Add_Packed_Fixed32;

  -- repeated fixed64 packed_fixed64 = 97 [packed = true];
  function Packed_Fixed64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Fixed64.Length);
  end Packed_Fixed64_Size;

  procedure Clear_Packed_Fixed64
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Fixed64.Clear;
  end Clear_Packed_Fixed64;

  function Get_Packed_Fixed64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_UInt64 is
  begin
    return The_Message.Packed_Fixed64.Element (Index);
  end Get_Packed_Fixed64;

  procedure Set_Packed_Fixed64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Packed_Fixed64.Replace_Element (Index, Value);
  end Set_Packed_Fixed64;

  procedure Add_Packed_Fixed64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_UInt64) is
  begin
    The_Message.Packed_Fixed64.Append (Value);
  end Add_Packed_Fixed64;

  -- repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  function Packed_Sfixed32_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Sfixed32.Length);
  end Packed_Sfixed32_Size;

  procedure Clear_Packed_Sfixed32
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Sfixed32.Clear;
  end Clear_Packed_Sfixed32;

  function Get_Packed_Sfixed32
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int32 is
  begin
    return The_Message.Packed_Sfixed32.Element (Index);
  end Get_Packed_Sfixed32;

  procedure Set_Packed_Sfixed32
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Packed_Sfixed32.Replace_Element (Index, Value);
  end Set_Packed_Sfixed32;

  procedure Add_Packed_Sfixed32
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int32) is
  begin
    The_Message.Packed_Sfixed32.Append (Value);
  end Add_Packed_Sfixed32;

  -- repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  function Packed_Sfixed64_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Sfixed64.Length);
  end Packed_Sfixed64_Size;

  procedure Clear_Packed_Sfixed64
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Sfixed64.Clear;
  end Clear_Packed_Sfixed64;

  function Get_Packed_Sfixed64
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Int64 is
  begin
    return The_Message.Packed_Sfixed64.Element (Index);
  end Get_Packed_Sfixed64;

  procedure Set_Packed_Sfixed64
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Packed_Sfixed64.Replace_Element (Index, Value);
  end Set_Packed_Sfixed64;

  procedure Add_Packed_Sfixed64
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Int64) is
  begin
    The_Message.Packed_Sfixed64.Append (Value);
  end Add_Packed_Sfixed64;

  -- repeated float packed_float = 100 [packed = true];
  function Packed_Float_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Float.Length);
  end Packed_Float_Size;

  procedure Clear_Packed_Float
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Float.Clear;
  end Clear_Packed_Float;

  function Get_Packed_Float
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Float is
  begin
    return The_Message.Packed_Float.Element (Index);
  end Get_Packed_Float;

  procedure Set_Packed_Float
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Float) is
  begin
    The_Message.Packed_Float.Replace_Element (Index, Value);
  end Set_Packed_Float;

  procedure Add_Packed_Float
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Float) is
  begin
    The_Message.Packed_Float.Append (Value);
  end Add_Packed_Float;

  -- repeated double packed_double = 101 [packed = true];
  function Packed_Double_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Double.Length);
  end Packed_Double_Size;

  procedure Clear_Packed_Double
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Double.Clear;
  end Clear_Packed_Double;

  function Get_Packed_Double
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Double is
  begin
    return The_Message.Packed_Double.Element (Index);
  end Get_Packed_Double;

  procedure Set_Packed_Double
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Double) is
  begin
    The_Message.Packed_Double.Replace_Element (Index, Value);
  end Set_Packed_Double;

  procedure Add_Packed_Double
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Double) is
  begin
    The_Message.Packed_Double.Append (Value);
  end Add_Packed_Double;

  -- repeated bool packed_bool = 102 [packed = true];
  function Packed_Bool_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Bool.Length);
  end Packed_Bool_Size;

  procedure Clear_Packed_Bool
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Bool.Clear;
  end Clear_Packed_Bool;

  function Get_Packed_Bool
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return Protocol_Buffers.Wire_Format.PB_Bool is
  begin
    return The_Message.Packed_Bool.Element (Index);
  end Get_Packed_Bool;

  procedure Set_Packed_Bool
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool) is
  begin
    The_Message.Packed_Bool.Replace_Element (Index, Value);
  end Set_Packed_Bool;

  procedure Add_Packed_Bool
    (The_Message : in out TestPackedTypes.Instance;
     Value : in Protocol_Buffers.Wire_Format.PB_Bool) is
  begin
    The_Message.Packed_Bool.Append (Value);
  end Add_Packed_Bool;

  -- repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  function Packed_Enum_Size
    (The_Message : in TestPackedTypes.Instance) return Protocol_Buffers.Wire_Format.PB_Object_Size is
  begin
    return Protocol_Buffers.Wire_Format.PB_Object_Size (The_Message.Packed_Enum.Length);
  end Packed_Enum_Size;

  procedure Clear_Packed_Enum
    (The_Message : in out TestPackedTypes.Instance) is
  begin
    The_Message.Packed_Enum.Clear;
  end Clear_Packed_Enum;

  function Get_Packed_Enum
    (The_Message : in TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size) return ForeignEnum is
  begin
    return PB_Int32_To_Enumeration(The_Message.Packed_Enum.Element (Index));
  end Get_Packed_Enum;

  procedure Set_Packed_Enum
    (The_Message : in out TestPackedTypes.Instance;
     Index : in Protocol_Buffers.Wire_Format.PB_Object_Size;
     Value : in ForeignEnum) is
  begin
    The_Message.Packed_Enum.Replace_Element (Index, Enumeration_To_PB_Int32(Value));
  end Set_Packed_Enum;

  procedure Add_Packed_Enum
    (The_Message : in out TestPackedTypes.Instance;
     Value : in ForeignEnum) is
  begin
    The_Message.Packed_Enum.Append (Enumeration_To_PB_Int32 (Value));
  end Add_Packed_Enum;

end Unittest.TestPackedTypes;
